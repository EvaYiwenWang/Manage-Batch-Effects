hd.trt_q = p.adjust(hd.trt_p,method = 'fdr')
# HD data
hd.nc = hd.trt_q > 0.05
table(hd.nc)
View(hd.count)
hd.trt_q
plot(hd.trt_q)
hd.trt_q <= 0.05
which(hd.trt_q <= 0.05)
which(hd.trt_p <= 0.05)
res = lm(hd.tss.clr[,1]~hd.trt)
summary(res)
hd.nc = hd.trt_p > 0.05
hd.ruv2 <- RUV2(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc, k = 3) # k is subjective
hd.ruv2.trt_p <- hd.ruv2$p
hd.ruv2.trt_q <- p.adjust(hd.ruv2.trt_p,method="fdr")
?getK
# sponge data
sponge.k = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.ruv4 <- RUV4(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = sponge.k)
# sponge data
sponge.k = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.k$k
table(sponge.nc)
# sponge data
sponge.k.obj = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.k = sponge.k.obj$k
sponge.k
?ifelse
sponge.k = ifelse(sponge.k !=0, sponge.k, 1)
sponge.k
sponge.k.obj = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.k = sponge.k.obj$k
sponge.k = ifelse(sponge.k !=0, sponge.k, 1)
sponge.ruv4 <- RUV4(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = sponge.k)
sponge.ruv4.trt_p <- sponge.ruv4$p
sponge.ruv4.trt_q <- p.adjust(sponge.ruv4.trt_p,method="fdr")
table(sponge.ruv4.trt_q <= 0.05)
sponge.ruv4 <- RUV4(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = 0)
sponge.ruv4.trt_p <- sponge.ruv4$p
sponge.ruv4.trt_q <- p.adjust(sponge.ruv4.trt_p,method="fdr")
table(sponge.ruv4.trt_q <= 0.05)
# AD data
ad.k.obj = getK(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc)
ad.k =ad.k.obj$k
ad.k
ad.k = ifelse(ad.k !=0, ad.k, 1)
ad.k
ad.k.obj = getK(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc)
ad.k =ad.k.obj$k
ad.k = ifelse(ad.k !=0, ad.k, 1)
ad.ruv4 <- RUV4(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc, k = ad.k)
ad.ruv4.trt_p <- ad.ruv4$p
ad.ruv4.trt_q <- p.adjust(ad.ruv4.trt_p,method="fdr")
# HD data
hd.k.obj = getK(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc)
hd.k = hd.k.obj$k
hd.k = ifelse(hd.k !=0, hd.k, 1)
hd.k
# sponge data
sponge.k.obj = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.k = sponge.k.obj$k
sponge.k = ifelse(sponge.k !=0, sponge.k, 1)
sponge.ruv4 <- RUV4(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = sponge.k)
sponge.ruv4.trt_p <- sponge.ruv4$p
sponge.ruv4.trt_q <- p.adjust(sponge.ruv4.trt_p,method="fdr")
# AD data
ad.k.obj = getK(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc)
ad.k =ad.k.obj$k
ad.k = ifelse(ad.k !=0, ad.k, 1)
ad.ruv4 <- RUV4(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc, k = ad.k)
ad.ruv4.trt_p <- ad.ruv4$p
ad.ruv4.trt_q <- p.adjust(ad.ruv4.trt_p,method="fdr")
# HD data
hd.k.obj = getK(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc)
hd.k = hd.k.obj$k
hd.k = ifelse(hd.k !=0, hd.k, 1)
hd.ruv4 <- RUV4(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc, k = hd.k)
hd.ruv4.trt_p <- hd.ruv4$p
hd.ruv4.trt_q <- p.adjust(hd.ruv4.trt_p,method="fdr")
?fabatch
library(bapred)
?fabatch
# sponge data
sponge.fabatch = fabatch(x = sponge.tss.clr,y = sponge.trt, batch = sponge.batch)
sponge.trt
as.factor(as.numeric(sponge.trt))
# sponge data
sponge.fabatch = fabatch(x = sponge.tss.clr,y = as.factor(as.numeric(sponge.trt)), batch = sponge.batch)
sponge.batch
data(autism)
x
X
dim(X)
Xsub <- X[,sample(1:ncol(X), size=150)]
View(Xsub)
subinds <- unlist(sapply(1:length(levels(batch)), function(x) {
indbatch <- which(batch==x)
if(length(indbatch) > 20)
indbatch <- sort(sample(indbatch, size=20))
indbatch
}))
subinds
batchsub <- batch[subinds]
batchsub
batch
table(batch)
table(batchsub)
ysub <- y[subinds]
table(y)
table(ysub)
fabatch(x=Xsub, y=ysub, batch=batchsub)
Xsub <- X[,sample(1:ncol(X), size=150)]
subinds <- unlist(sapply(1:length(levels(batch)), function(x) {
indbatch <- which(batch==x)
if(length(indbatch) > 20)
indbatch <- sort(sample(indbatch, size=20))
indbatch
}))
Xsub <- Xsub[subinds,]
batchsub <- batch[subinds]
ysub <- y[subinds]
fabatch(x=Xsub, y=ysub, batch=batchsub)
table(sponge.trt)
table(sponge.batch)
table(Xsub,ysub)
dim(Xsub)
table(batchsub,ysub)
ad.batch
ad.trt
# ad data
ad.fabatch = fabatch(x = ad.tss.clr,y = as.factor(as.numeric(ad.trt)), batch = as.factor(as.numeric(ad.batch)))
ad.fabatch
# sponge data
sponge.fabatch.obj = fabatch(x = sponge.tss.clr,y = as.factor(as.numeric(sponge.trt)), batch = sponge.batch)
sponge.fabatch <- sponge.fabatch.obj$xadj
dim(sponge.fabatch)
View(sponge.fabatch)
# ad data
ad.fabatch.obj = fabatch(x = ad.tss.clr,y = as.factor(as.numeric(ad.trt)), batch = as.factor(as.numeric(ad.batch)))
library(bapred)
# sponge data
sponge.fabatch.obj = fabatch(x = sponge.tss.clr,y = as.factor(as.numeric(sponge.trt)), batch = sponge.batch)
sponge.fabatch <- sponge.fabatch.obj$xadj
# ad data
ad.fabatch.obj = fabatch(x = ad.tss.clr,y = as.factor(as.numeric(ad.trt)), batch = as.factor(as.numeric(ad.batch)))
ad.fabatch <- ad.fabatch.obj$xadj
install.packages("bapred")
#cran.packages = c('knitr','mixOmics','xtable','ggplot2','vegan','cluster','gridExtra','pheatmap','ruv','lmerTest','bapred')
#install.packages(cran.packages)
#bioconductor.packages = c('sva','limma','AgiMicroRna','variancePartition','pvca')
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install(bioconductor.packages, version = "3.8")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(vegan) # RDA
library(AgiMicroRna) # RLE plot
library(cluster) # silhouette coefficient
library(variancePartition) # variance calculation
library(pvca) # PVCA
library(pheatmap) # heatmap
library(ruv) # RUVIII
library(lmerTest) #lmer
library(bapred) # FAbatch
# load the data
load(file = './datasets/microbiome_datasets.RData')
# load the extra functions
source(file = './Functions.R')
dim(sponge.tss)
dim(ad.count)
dim(hd.count)
# ad data
ad.index.keep = which(colSums(ad.count)*100/(sum(colSums(ad.count))) > 0.01)
ad.count.keep = ad.count[,ad.index.keep]
dim(ad.count.keep)
# hd data
#hd.index.keep = which(colSums(hd.count)*100/(sum(colSums(hd.count))) > 0.001)
hd.count.keep = hd.count
dim(hd.count.keep)
# sponge data
sponge.tss = t(apply(sponge.tss + 0.01, 1, TSS.divide))
# ad data
ad.tss = t(apply(ad.count.keep + 1, 1, TSS.divide))
# hd data
hd.tss = t(apply(hd.count.keep + 1, 1, TSS.divide))
# sponge data
sponge.lib.size.tss <- apply(sponge.tss, 1, sum)
barplot(sponge.lib.size.tss, main =  'Sponge data',las=2)
# ad data
ad.lib.size.tss <- apply(ad.tss, 1, sum)
barplot(ad.lib.size.tss, main =  'AD data',las=2)
# hd data
hd.lib.size.tss <- apply(hd.tss, 1, sum)
barplot(hd.lib.size.tss, main =  'HD data',las=2)
# sponge data
sponge.tss.clr <- logratio.transfo(sponge.tss,logratio = 'CLR')
class(sponge.tss.clr) <- 'matrix'
# ad data
ad.tss.clr <- logratio.transfo(ad.tss,logratio = 'CLR')
class(ad.tss.clr) <- 'matrix'
# hd data
hd.tss.clr <- logratio.transfo(hd.tss,logratio = 'CLR')
class(hd.tss.clr) <- 'matrix'
knitr::include_graphics("figures/table.png")
# sponge data
sponge.pca.before = pca(sponge.tss.clr, ncomp = 3)
# ad data
ad.pca.before = pca(ad.tss.clr, ncomp = 3)
# hd data
hd.pca.before = pca(hd.tss.clr, ncomp = 3)
Scatter_Density(data = sponge.pca.before$variates$X, batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.before$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Before batch effect correction (Sponge)')
Scatter_Density(data = ad.pca.before$variates$X, batch = ad.batch, trt = ad.trt, expl.var = ad.pca.before$explained_variance, xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)', title = 'Before batch effect correction (AD)')
Scatter_Density(data = hd.pca.before$variates$X, batch = hd.batch, trt = hd.trt, expl.var = hd.pca.before$explained_variance, xlim = c(-20,20), ylim = c(-25,15), batch.legend.title = 'Cage (batch)', trt.legend.title = 'Genotype (trt)', title = 'Before batch effect correction (HD)')
# sponge data
sponge.before.df = data.frame(value = sponge.tss.clr[,9], batch = sponge.batch)
box_plot_fun(data = sponge.before.df,x=sponge.before.df$batch,
y=sponge.before.df$value,title = 'OTU9 (Sponge)',
batch.legend.title = 'Gel (batch)')
ggplot(sponge.before.df, aes(x = value, fill = batch)) + geom_density(alpha = 0.5) + scale_fill_manual(values=color.mixo(1:10)) + labs(title = 'OTU9 (Sponge)',x='Value',fill = 'Gel (batch)') + theme_bw() + theme(plot.title = element_text(hjust=0.5), panel.grid = element_blank())
sponge.lm = lm(sponge.tss.clr[,9]~ sponge.trt + sponge.batch)
summary(sponge.lm)
##################
# ad data
ad.before.df = data.frame(value = ad.tss.clr[,1], batch = ad.batch)
box_plot_fun(data = ad.before.df,x=ad.before.df$batch,
y=ad.before.df$value,title = 'OTU12 (AD)',
batch.legend.title = 'Date (batch)',
x.angle = 45, x.hjust = 1)
ggplot(ad.before.df, aes(x = value, fill = batch)) + geom_density(alpha = 0.5) + scale_fill_manual(values=color.mixo(1:10)) + labs(title = 'OTU12 (AD)',x = 'Value',fill = 'Date (batch)') + theme_bw() + theme(plot.title = element_text(hjust=0.5), panel.grid = element_blank())
ad.lm = lm(ad.tss.clr[,1]~ ad.trt + ad.batch)
anova(ad.lm)
summary(ad.lm)
##################
# hd data
hd.before.df = data.frame(value = hd.tss.clr[,1], batch = hd.batch)
box_plot_fun(data = hd.before.df,x=hd.before.df$batch,
y=hd.before.df$value,title = 'OTU1 (HD)',
batch.legend.title = 'Cage (batch)')
ggplot(hd.before.df, aes(x = value, fill = batch)) + geom_density(alpha = 0.5) + scale_fill_manual(values=color.mixo(1:10)) + labs(title = 'OTU1 (HD)',x = 'Value',fill = 'Cage (batch)') + theme_bw() + theme(plot.title = element_text(hjust=0.5), panel.grid = element_blank())
hd.lm = lm(hd.tss.clr[,1]~ hd.batch)
anova(hd.lm)
# sponge data
sponge.batch_c = sponge.batch[sponge.trt == 'C']
sponge.batch_e = sponge.batch[sponge.trt == 'E']
# before
sponge.before_c = sponge.tss.clr[sponge.trt == 'C',]
sponge.before_e = sponge.tss.clr[sponge.trt == 'E',]
RleMicroRna2(object = t(sponge.before_c),batch = sponge.batch_c,maintitle = 'Sponge (tissue: choanosome)')
RleMicroRna2(object = t(sponge.before_e),batch = sponge.batch_e,maintitle = 'Sponge (tissue: ectosome)')
# ad data
ad.batch_05 = ad.batch[ad.trt == '0-0.5']
ad.batch_2 = ad.batch[ad.trt == '1-2']
# before
ad.before_05 = ad.tss.clr[ad.trt == '0-0.5',]
ad.before_2 = ad.tss.clr[ad.trt == '1-2',]
RleMicroRna2(object = t(ad.before_05),batch = ad.batch_05,maintitle = 'AD (initial phenol conc: 0-0.5 g/L)',legend.cex = 0.5)
RleMicroRna2(object = t(ad.before_2),batch = ad.batch_2,maintitle = 'AD (initial phenol conc: 1-2 g/L)',cex.xaxis = 0.7,legend.cex = 0.5)
# hd data ###########
hd.batch_h = hd.batch[hd.trt == 'HD']
hd.batch_w = hd.batch[hd.trt == 'WT']
# before
hd.before_h = hd.tss.clr[hd.trt == 'HD',]
hd.before_w = hd.tss.clr[hd.trt == 'WT',]
RleMicroRna2(object = t(hd.before_h),batch = hd.batch_h,maintitle = 'HD (genotype: HD)')
RleMicroRna2(object = t(hd.before_w),batch = hd.batch_w,maintitle = 'HD (genotype: WT)')
# Sponge data
#scale
sponge.tss.clr.scale = scale(sponge.tss.clr,center = T, scale = T) # scale on OTUs
sponge.tss.clr.scale = scale(t(sponge.tss.clr.scale), center = T, scale = T) # scale on samples
sponge.anno_col = data.frame(Batch = sponge.batch, Tissue = sponge.trt)
sponge.anno_metabo_colors = list(Batch = c('1'="#388ECC",'2'="#F68B33"),Tissue = c(C="#F0E442",E="#D55E00"))
pheatmap(sponge.tss.clr.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=5, fontsize_col=8,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = sponge.anno_col,
annotation_colors = sponge.anno_metabo_colors,
border_color = 'NA',
main = 'Sponge data - Scaled')
#################
# AD data
#scale
ad.tss.clr.scale = scale(ad.tss.clr,center = T, scale = T) # scale on OTUs
ad.tss.clr.scale = scale(t(ad.tss.clr.scale), center = T, scale = T) # scale on samples
ad.anno_col = data.frame(Batch = ad.batch, Treatment = ad.trt)
ad.anno_metabo_colors = list(Batch = c('09/04/2015'="#388ECC",'14/04/2016'="#F68B33",'01/07/2016'="#C2C2C2",'14/11/2016'="#009E73",'21/09/2017'="#CC79A7"), Treatment = c("0-0.5" = "#0072B2", "1-2" = "#999999"))
pheatmap(ad.tss.clr.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = ad.anno_col,
annotation_colors= ad.anno_metabo_colors,
border_color = 'NA',
main = 'AD data - Scaled')
#################
# HD data
#scale
hd.tss.clr.scale = scale(hd.tss.clr,center = T, scale = T) # scale on OTUs
hd.tss.clr.scale = scale(t(hd.tss.clr.scale), center = T, scale = T) # scale on samples
hd.anno_col = data.frame(Batch = hd.batch, Treatment = hd.trt)
hd.anno_metabo_colors = list(Batch = c('F'="#388ECC",'G'="#F68B33",'H'="#C2C2C2",'J'="#009E73"), Treatment = c("HD" = "#0072B2", "WT" = "#999999"))
pheatmap(hd.tss.clr.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = hd.anno_col,
annotation_colors= hd.anno_metabo_colors,
border_color = 'NA',
main = 'HD data - Scaled')
# Sponge data
sponge.trt_p <- apply(sponge.tss.clr, 2, FUN = function(x){
res.lm <- lm(x ~ sponge.trt + sponge.batch)
summary.res = summary(res.lm)
p = summary.res$coefficients[2,4]
})
sponge.trt_q = p.adjust(sponge.trt_p,method = 'fdr')
# AD data
ad.trt_p <- apply(ad.tss.clr, 2, FUN = function(x){
res.lm <- lm(x ~ ad.trt + ad.batch)
summary.res = summary(res.lm)
p = summary.res$coefficients[2,4]
})
ad.trt_q = p.adjust(ad.trt_p,method = 'fdr')
# HD data
hd.trt_p <- apply(hd.tss.clr, 2, FUN = function(x){
res.lmm <- lmer(x ~ hd.trt + (1|hd.batch))
summary.res = summary(res.lmm)
p = summary.res$coefficients[2,5]
})
hd.trt_q = p.adjust(hd.trt_p,method = 'fdr')
# sponge data
sponge.mod = model.matrix(~sponge.trt) # full model
sponge.mod0 = model.matrix(~1,data = sponge.trt) # null model
sponge.sva.n <- num.sv(dat = t(sponge.tss.clr), mod = sponge.mod)
sponge.sva = sva(t(sponge.tss.clr), sponge.mod, sponge.mod0, n.sv = sponge.sva.n)
sponge.mod.bat = cbind(sponge.mod,sponge.sva$sv)
sponge.mod0.bat = cbind(sponge.mod0,sponge.sva$sv)
sponge.sva.trt_p = f.pvalue(t(sponge.tss.clr),sponge.mod.bat,sponge.mod0.bat)
sponge.sva.trt_q = p.adjust(sponge.sva.trt_p,method="fdr")
# ad data
ad.mod = model.matrix(~ad.trt)
ad.mod0 = model.matrix(~1,data = ad.trt)
ad.sva.n <- num.sv(dat = t(ad.tss.clr), mod = ad.mod)
ad.sva = sva(t(ad.tss.clr), ad.mod, ad.mod0, n.sv = ad.sva.n)
ad.mod.bat = cbind(ad.mod,ad.sva$sv)
ad.mod0.bat = cbind(ad.mod0,ad.sva$sv)
ad.sva.trt_p = f.pvalue(t(ad.tss.clr),ad.mod.bat,ad.mod0.bat)
ad.sva.trt_q = p.adjust(ad.sva.trt_p,method="fdr")
# hd data
hd.mod = model.matrix(~hd.trt)
hd.mod0 = model.matrix(~1,data = hd.trt)
hd.sva.n <- num.sv(dat = t(hd.tss.clr), mod = hd.mod)
hd.sva = sva(t(hd.tss.clr), hd.mod, hd.mod0, n.sv = hd.sva.n)
hd.mod.bat = cbind(hd.mod,hd.sva$sv)
hd.mod0.bat = cbind(hd.mod0,hd.sva$sv)
hd.sva.trt_p = f.pvalue(t(hd.tss.clr),hd.mod.bat,hd.mod0.bat)
hd.sva.trt_q = p.adjust(hd.sva.trt_p,method="fdr")
# sponge data
sponge.nc = sponge.trt_q > 0.05
sponge.ruv2 <- RUV2(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = 3) # k is subjective
sponge.ruv2.trt_p <- sponge.ruv2$p
sponge.ruv2.trt_q <- p.adjust(sponge.ruv2.trt_p,method="fdr")
# AD data
ad.nc = ad.trt_q > 0.05
ad.ruv2 <- RUV2(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc, k = 3) # k is subjective
ad.ruv2.trt_p <- ad.ruv2$p
ad.ruv2.trt_q <- p.adjust(ad.ruv2.trt_p,method="fdr")
# HD data
hd.nc = hd.trt_p > 0.05
hd.ruv2 <- RUV2(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc, k = 3) # k is subjective
hd.ruv2.trt_p <- hd.ruv2$p
hd.ruv2.trt_q <- p.adjust(hd.ruv2.trt_p,method="fdr")
# sponge data
sponge.k.obj = getK(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc)
sponge.k = sponge.k.obj$k
sponge.k = ifelse(sponge.k !=0, sponge.k, 1)
sponge.ruv4 <- RUV4(Y = sponge.tss.clr, X = sponge.trt, ctl = sponge.nc, k = sponge.k)
sponge.ruv4.trt_p <- sponge.ruv4$p
sponge.ruv4.trt_q <- p.adjust(sponge.ruv4.trt_p,method="fdr")
# AD data
ad.k.obj = getK(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc)
ad.k =ad.k.obj$k
ad.k = ifelse(ad.k !=0, ad.k, 1)
ad.ruv4 <- RUV4(Y = ad.tss.clr, X = ad.trt, ctl = ad.nc, k = ad.k)
ad.ruv4.trt_p <- ad.ruv4$p
ad.ruv4.trt_q <- p.adjust(ad.ruv4.trt_p,method="fdr")
# HD data
hd.k.obj = getK(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc)
hd.k = hd.k.obj$k
hd.k = ifelse(hd.k !=0, hd.k, 1)
hd.ruv4 <- RUV4(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc, k = hd.k)
hd.ruv4.trt_p <- hd.ruv4$p
hd.ruv4.trt_q <- p.adjust(hd.ruv4.trt_p,method="fdr")
# Sponge data
sponge.b1 = scale(sponge.tss.clr[sponge.batch== 1,],center = TRUE, scale = FALSE)
sponge.b2 = scale(sponge.tss.clr[sponge.batch== 2,],center = TRUE, scale = FALSE)
sponge.bmc = rbind(sponge.b1,sponge.b2)
sponge.bmc = sponge.bmc[rownames(sponge.tss.clr),]
##############
# AD data
ad.b1 = scale(ad.tss.clr[ad.batch=="09/04/2015",],center = TRUE, scale = FALSE)
ad.b2 = scale(ad.tss.clr[ad.batch=="14/04/2016",],center = TRUE, scale = FALSE)
ad.b3 = scale(ad.tss.clr[ad.batch=="14/11/2016",],center = TRUE, scale = FALSE)
ad.b4 = scale(ad.tss.clr[ad.batch=="01/07/2016",],center = TRUE, scale = FALSE)
ad.b5 = scale(ad.tss.clr[ad.batch=="21/09/2017",],center = TRUE, scale = FALSE)
ad.bmc = rbind(ad.b1,ad.b2,ad.b3,ad.b4,ad.b5)
ad.bmc = ad.bmc[rownames(ad.tss.clr),]
# Sponge data
sponge.combat <- t(ComBat(t(sponge.tss.clr),batch=sponge.batch,mod = sponge.mod,par.prior=F,prior.plots = F))
##############
# AD data
ad.combat <- t(ComBat(t(ad.tss.clr),batch=ad.batch,mod = ad.mod, par.prior=F,prior.plots = F))
# Sponge data
sponge.limma <- t(removeBatchEffect(t(sponge.tss.clr),batch = sponge.batch,design = sponge.mod))
#############
ad.limma <- t(removeBatchEffect(t(ad.tss.clr),batch = ad.batch,design = ad.mod))
# sponge data
sponge.fabatch.obj = fabatch(x = sponge.tss.clr,y = as.factor(as.numeric(sponge.trt)), batch = sponge.batch)
sponge.fabatch <- sponge.fabatch.obj$xadj
# ad data
ad.fabatch.obj = fabatch(x = ad.tss.clr,y = as.factor(as.numeric(ad.trt)), batch = as.factor(as.numeric(ad.batch)))
ad.fabatch <- ad.fabatch.obj$xadj
sponge.percentile = percentile_norm(data = sponge.tss, batch = sponge.batch, trt = sponge.trt)
# ad data
ad.percentile = percentile_norm(data = ad.tss, batch = ad.batch, trt = ad.trt)
#################
# sponge data
sponge.sd = apply(sponge.tss.clr,2,sd)
sponge.mean = apply(sponge.tss.clr,2,mean)
X.sponge = scale(sponge.tss.clr,center = T,scale = T)
m.sponge = crossprod(X.sponge)
m.svd.sponge = svd(m.sponge)
barplot(m.svd.sponge$d)
a1.sponge = m.svd.sponge$u[,1]
b1.sponge = m.svd.sponge$v[,1]
# component 1
t1.sponge = X.sponge %*% a1.sponge / drop(sqrt(crossprod(a1.sponge)))
c1.sponge = crossprod(X.sponge, t1.sponge) / drop(crossprod(t1.sponge))
defl.matrix_svd1.sponge  = X.sponge - t1.sponge %*% t(c1.sponge)
# #
sponge.svd = defl.matrix_svd1.sponge
sponge.svd[1:nrow(sponge.svd),1:ncol(sponge.svd)] = NA
for(i in 1:ncol(defl.matrix_svd1.sponge)){
for(j in 1:nrow(defl.matrix_svd1.sponge)){
sponge.svd[j,i] = defl.matrix_svd1.sponge[j,i]*sponge.sd[i] + sponge.mean[i]
}
}
#####################
# ad data
ad.sd = apply(ad.tss.clr,2,sd)
ad.mean = apply(ad.tss.clr,2,mean)
X.ad = scale(ad.tss.clr,center = T,scale = T)
m.ad = crossprod(X.ad)
m.svd.ad = svd(m.ad)
barplot(m.svd.ad$d)
a1.ad = m.svd.ad$u[,1]
b1.ad = m.svd.ad$v[,1]
# component 1
t1.ad = X.ad %*% a1.ad / drop(sqrt(crossprod(a1.ad)))
c1.ad = crossprod(X.ad, t1.ad) / drop(crossprod(t1.ad))
defl.matrix_svd1.ad  = X.ad - t1.ad %*% t(c1.ad)
# #
ad.svd = defl.matrix_svd1.ad
ad.svd[1:nrow(ad.svd),1:ncol(ad.svd)] = NA
for(i in 1:ncol(defl.matrix_svd1.ad)){
for(j in 1:nrow(defl.matrix_svd1.ad)){
ad.svd[j,i] = defl.matrix_svd1.ad[j,i]*ad.sd[i] + ad.mean[i]
}
}
#####################
# ad data only
replicates.ad = ad.metadata$sample_name.data.extraction
replicates.ad.matrix = replicate.matrix(replicates.ad)
p.ad = matrix(NA,nrow = 2, ncol = ncol(ad.tss.clr))
rownames(p.ad) = c('ad.trt','ad.batch')
colnames(p.ad) = colnames(ad.tss.clr)
for(i in 1:ncol(ad.tss.clr)){
res = lm(ad.tss.clr[,i] ~ ad.trt + ad.batch)
summ.res = summary(res)
anova.res = anova(res)
p.ad[1,i] = anova.res$`Pr(>F)`[1]
p.ad[2,i] = anova.res$`Pr(>F)`[2]
}
p.adj.ad = apply(p.ad,1,p.adjust,method = 'fdr')
p.adj.ad1 = sort(p.adj.ad[,1],decreasing = T)
nc.otu1 = names(p.adj.ad1[1:75]) #negative control genes need be equal or more than samples
nc1 = rep(FALSE, ncol(ad.tss.clr))
names(nc1) = colnames(ad.tss.clr)
nc1[nc.otu1] = TRUE
ad.ruv <- RUVIII(Y=ad.tss.clr,M = replicates.ad.matrix, ctl = nc1)
rownames(ad.ruv) = rownames(ad.tss.clr)
