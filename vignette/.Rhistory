# removeBatchEffect
ad.limma.scale = scale(ad.limma,center = T, scale = T) # scale on OTUs
ad.limma.scale = scale(t(ad.limma.scale), center = T, scale = T) # scale on samples
pheatmap(ad.limma.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = anno_col.ad,
annotation_colors=anno_metabo_colors.ad,
border_color = 'NA',
main = 'AD data - removeBatchEffect')
# percentile normalisation
ad.percentile.scale = scale(ad.percentile,center = T, scale = T) # scale on OTUs
ad.percentile.scale = scale(t(ad.percentile.scale), center = T, scale = T) # scale on samples
pheatmap(ad.percentile.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = anno_col.ad,
annotation_colors=anno_metabo_colors.ad,
border_color = 'NA',
main = 'AD data - percentile norm')
# SVD
ad.svd.scale = scale(ad.svd,center = T, scale = T) # scale on OTUs
ad.svd.scale = scale(t(ad.svd.scale), center = T, scale = T) # scale on samples
pheatmap(ad.svd.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = anno_col.ad,
annotation_colors=anno_metabo_colors.ad,
border_color = 'NA',
main = 'AD data - SVD')
# RUVIII
ad.ruv.scale = scale(ad.ruv,center = T, scale = T) # scale on OTUs
ad.ruv.scale = scale(t(ad.ruv.scale), center = T, scale = T) # scale on samples
pheatmap(ad.ruv.scale,
scale = 'none',
cluster_rows = F,
cluster_cols = T,
fontsize_row=4, fontsize_col=6,
fontsize = 8,
clustering_distance_rows = "euclidean",
clustering_method = "ward.D",
treeheight_row = 30,
annotation_col = anno_col.ad,
annotation_colors=anno_metabo_colors.ad,
border_color = 'NA',
main = 'AD data - RUVIII')
# Sponge data
data.design.sponge = numeric()
data.design.sponge$group = sponge.trt
data.design.sponge$batch = sponge.batch
# before
# conditioning on a batch effect
rda.sponge.before1 = rda(sponge.tss.clr ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.before2 = rda(sponge.tss.clr ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.before = rda.sponge.before1$pCCA$tot.chi*100/rda.sponge.before1$tot.chi
rda.prop.trt.sponge.before = rda.sponge.before2$pCCA$tot.chi*100/rda.sponge.before1$tot.chi
# BMC
# conditioning on a batch effect
rda.sponge.bmc1 = rda(sponge.bmc ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.bmc2 = rda(sponge.bmc ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.bmc = rda.sponge.bmc1$pCCA$tot.chi*100/rda.sponge.bmc1$tot.chi
rda.prop.trt.sponge.bmc = rda.sponge.bmc2$pCCA$tot.chi*100/rda.sponge.bmc2$tot.chi
# combat
# conditioning on a batch effect
rda.sponge.combat1 = rda(sponge.combat ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.combat2 = rda(sponge.combat ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.combat = rda.sponge.combat1$pCCA$tot.chi*100/rda.sponge.combat1$tot.chi
rda.prop.trt.sponge.combat = rda.sponge.combat2$pCCA$tot.chi*100/rda.sponge.combat2$tot.chi
# limma
# conditioning on a batch effect
rda.sponge.limma1 = rda(sponge.limma ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.limma2 = rda(sponge.limma ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.limma = rda.sponge.limma1$pCCA$tot.chi*100/rda.sponge.limma1$tot.chi
rda.prop.trt.sponge.limma = rda.sponge.limma2$pCCA$tot.chi*100/rda.sponge.limma2$tot.chi
# percentile
# conditioning on a batch effect
rda.sponge.percentile1 = rda(sponge.percentile ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.percentile2 = rda(sponge.percentile ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.percentile = rda.sponge.percentile1$pCCA$tot.chi*100/rda.sponge.percentile1$tot.chi
rda.prop.trt.sponge.percentile = rda.sponge.percentile2$pCCA$tot.chi*100/rda.sponge.percentile2$tot.chi
# SVD
# conditioning on a batch effect
rda.sponge.svd1 = rda(sponge.svd ~ group + Condition(batch), data = data.design.sponge)
rda.sponge.svd2 = rda(sponge.svd ~ batch + Condition(group), data = data.design.sponge)
# amount of variance
rda.prop.bat.sponge.svd = rda.sponge.svd1$pCCA$tot.chi*100/rda.sponge.svd1$tot.chi
rda.prop.trt.sponge.svd = rda.sponge.svd2$pCCA$tot.chi*100/rda.sponge.svd2$tot.chi
# proportion
rda.prop.sponge.before = c(rda.prop.bat.sponge.before,rda.prop.trt.sponge.before)
rda.prop.sponge.bmc = c(rda.prop.bat.sponge.bmc,rda.prop.trt.sponge.bmc)
rda.prop.sponge.combat = c(rda.prop.bat.sponge.combat,rda.prop.trt.sponge.combat)
rda.prop.sponge.limma = c(rda.prop.bat.sponge.limma,rda.prop.trt.sponge.limma)
rda.prop.sponge.percentile = c(rda.prop.bat.sponge.percentile,rda.prop.trt.sponge.percentile)
rda.prop.sponge.svd= c(rda.prop.bat.sponge.svd,rda.prop.trt.sponge.svd)
rda.prop.sponge.val = c(rda.prop.sponge.before,rda.prop.sponge.bmc,rda.prop.sponge.combat,rda.prop.sponge.limma,rda.prop.sponge.percentile,rda.prop.sponge.svd)
rda.prop.sponge = data.frame(prop = rda.prop.sponge.val, prop.r = round(rda.prop.sponge.val,2), Method = rep(c('Before','BMC','ComBat','rBE','PN','SVD'),each=2),Type = rep(c('Batch','Tissue'),6))
rda.prop.sponge$Method =  factor(rda.prop.sponge$Method, levels = unique(rda.prop.sponge$Method))
ggplot(data = rda.prop.sponge, aes(x=Method,y=prop,fill = Type)) + geom_bar(stat="identity",position = 'dodge', colour = 'black') + geom_text(data=rda.prop.sponge, aes(Method, prop+2.5, label=prop.r), position = position_dodge(width=0.9), size=3) + theme_bw() + labs(y = "Variance explained (%)") + theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + ylim(0,100)
# AD data
data.design.ad = numeric()
data.design.ad$group = ad.trt
data.design.ad$batch = ad.batch
# before
# conditioning on a batch effect
rda.ad.before1 = rda(ad.tss.clr ~ group + Condition(batch), data = data.design.ad)
rda.ad.before2 = rda(ad.tss.clr ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.before = rda.ad.before1$pCCA$tot.chi*100/rda.ad.before1$tot.chi
rda.prop.trt.ad.before = rda.ad.before2$pCCA$tot.chi*100/rda.ad.before1$tot.chi
# BMC
# conditioning on a batch effect
rda.ad.bmc1 = rda(ad.bmc ~ group + Condition(batch), data = data.design.ad)
rda.ad.bmc2 = rda(ad.bmc ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.bmc = rda.ad.bmc1$pCCA$tot.chi*100/rda.ad.bmc1$tot.chi
rda.prop.trt.ad.bmc = rda.ad.bmc2$pCCA$tot.chi*100/rda.ad.bmc2$tot.chi
# combat
# conditioning on a batch effect
rda.ad.combat1 = rda(ad.combat ~ group + Condition(batch), data = data.design.ad)
rda.ad.combat2 = rda(ad.combat ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.combat = rda.ad.combat1$pCCA$tot.chi*100/rda.ad.combat1$tot.chi
rda.prop.trt.ad.combat = rda.ad.combat2$pCCA$tot.chi*100/rda.ad.combat2$tot.chi
# limma
# conditioning on a batch effect
rda.ad.limma1 = rda(ad.limma ~ group + Condition(batch), data = data.design.ad)
rda.ad.limma2 = rda(ad.limma ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.limma = rda.ad.limma1$pCCA$tot.chi*100/rda.ad.limma1$tot.chi
rda.prop.trt.ad.limma = rda.ad.limma2$pCCA$tot.chi*100/rda.ad.limma2$tot.chi
# percentile
# conditioning on a batch effect
rda.ad.percentile1 = rda(ad.percentile ~ group + Condition(batch), data = data.design.ad)
rda.ad.percentile2 = rda(ad.percentile ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.percentile = rda.ad.percentile1$pCCA$tot.chi*100/rda.ad.percentile1$tot.chi
rda.prop.trt.ad.percentile = rda.ad.percentile2$pCCA$tot.chi*100/rda.ad.percentile2$tot.chi
# SVD
# conditioning on a batch effect
rda.ad.svd1 = rda(ad.svd ~ group + Condition(batch), data = data.design.ad)
rda.ad.svd2 = rda(ad.svd ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.svd = rda.ad.svd1$pCCA$tot.chi*100/rda.ad.svd1$tot.chi
rda.prop.trt.ad.svd = rda.ad.svd2$pCCA$tot.chi*100/rda.ad.svd2$tot.chi
# RUVIII
# conditioning on a batch effect
rda.ad.ruv1 = rda(ad.ruv ~ group + Condition(batch), data = data.design.ad)
rda.ad.ruv2 = rda(ad.ruv ~ batch + Condition(group), data = data.design.ad)
# amount of variance
rda.prop.bat.ad.ruv = rda.ad.ruv1$pCCA$tot.chi*100/rda.ad.ruv1$tot.chi
rda.prop.trt.ad.ruv = rda.ad.ruv2$pCCA$tot.chi*100/rda.ad.ruv2$tot.chi
# proportion
rda.prop.ad.before = c(rda.prop.bat.ad.before,rda.prop.trt.ad.before)
rda.prop.ad.bmc = c(rda.prop.bat.ad.bmc,rda.prop.trt.ad.bmc)
rda.prop.ad.combat = c(rda.prop.bat.ad.combat,rda.prop.trt.ad.combat)
rda.prop.ad.limma = c(rda.prop.bat.ad.limma,rda.prop.trt.ad.limma)
rda.prop.ad.percentile = c(rda.prop.bat.ad.percentile,rda.prop.trt.ad.percentile)
rda.prop.ad.svd= c(rda.prop.bat.ad.svd,rda.prop.trt.ad.svd)
rda.prop.ad.ruv= c(rda.prop.bat.ad.ruv,rda.prop.trt.ad.ruv)
#############
rda.prop.ad.val = c(rda.prop.ad.before,rda.prop.ad.bmc,rda.prop.ad.combat,rda.prop.ad.limma,rda.prop.ad.percentile,rda.prop.ad.svd,rda.prop.ad.ruv)
rda.prop.ad = data.frame(prop = rda.prop.ad.val, prop.r = round(rda.prop.ad.val,2), Method = rep(c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII'),each=2),Type = rep(c('Batch','Treatment'),7))
rda.prop.ad$Method =  factor(rda.prop.ad$Method, levels = unique(rda.prop.ad$Method))
ggplot(data = rda.prop.ad, aes(x=Method,y=prop,fill = Type)) + geom_bar(stat="identity",position = 'dodge', colour = 'black') + geom_text(data=rda.prop.ad, aes(Method, prop+2.5, label=prop.r), position = position_dodge(width=1), size=3) + theme_bw() + labs(y = "Variance explained (%)") + theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_fill_hue(l=40) + ylim(0,100)
# AD data
PVCA.score.ad = data.frame(Interaction = NA, Batch = NA,Treatment = NA,Residuals = NA)
Bat_Int.factors = data.frame(Batch = ad.batch, Treatment = ad.trt)
rownames(Bat_Int.factors) = rownames(ad.tss.clr)
pdata <- AnnotatedDataFrame(Bat_Int.factors)
# before
eset.X.before <- new("ExpressionSet", exprs = t(ad.tss.clr), phenoData = pdata)
pvcaObj.before <- pvcaBatchAssess(eset.X.before, c('Batch','Treatment'), 0.6)
values.before = pvcaObj.before$dat
PVCA.score.ad[1,] = values.before
# bmc
eset.X.bmc <- new("ExpressionSet", exprs = t(ad.bmc), phenoData = pdata)
pvcaObj.bmc <- pvcaBatchAssess(eset.X.bmc, c('Batch','Treatment'), 0.6)
values.bmc = pvcaObj.bmc$dat
PVCA.score.ad[2,] = values.bmc
# combat
eset.X.combat <- new("ExpressionSet", exprs = t(ad.combat), phenoData = pdata)
pvcaObj.combat <- pvcaBatchAssess(eset.X.combat, c('Batch','Treatment'), 0.6)
values.combat = pvcaObj.combat$dat
PVCA.score.ad[3,] = values.combat
# PN
eset.X.percentile <- new("ExpressionSet", exprs = t(ad.percentile), phenoData = pdata)
pvcaObj.percentile <- pvcaBatchAssess(eset.X.percentile, c('Batch','Treatment'), 0.6)
values.percentile = pvcaObj.percentile$dat
PVCA.score.ad[5,] = values.percentile
# limma
eset.X.limma <- new("ExpressionSet", exprs = t(ad.limma), phenoData = pdata)
pvcaObj.limma <- pvcaBatchAssess(eset.X.limma, c('Batch','Treatment'), 0.6)
values.limma = pvcaObj.limma$dat
PVCA.score.ad[4,] = values.limma
# svd
eset.X.svd <- new("ExpressionSet", exprs = t(ad.svd), phenoData = pdata)
pvcaObj.svd <- pvcaBatchAssess(eset.X.svd, c('Batch','Treatment'), 0.6)
values.svd = pvcaObj.svd$dat
PVCA.score.ad[6,] = values.svd
# RUVIII
eset.X.ruv <- new("ExpressionSet", exprs = t(ad.ruv), phenoData = pdata)
pvcaObj.ruv <- pvcaBatchAssess(eset.X.ruv, c('Batch','Treatment'), 0.6)
values.ruv = pvcaObj.ruv$dat
PVCA.score.ad[7,] = values.ruv
rownames(PVCA.score.ad) =c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII')
#############
pvca.prop.ad.val = c(PVCA.score.ad$Batch,PVCA.score.ad$Treatment)
pvca.prop.ad = data.frame(prop = pvca.prop.ad.val, prop.r = round(pvca.prop.ad.val,2), Method = rep(c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII'),2),Type = rep(c('Batch','Treatment'),each = 7))
pvca.prop.ad$Method =  factor(pvca.prop.ad$Method, levels = unique(pvca.prop.ad$Method))
ggplot(data = pvca.prop.ad, aes(x=Method,y=prop,fill = Type)) + geom_bar(stat="identity",position = 'dodge',colour = 'black') + geom_text(data=pvca.prop.ad, aes(Method, prop+0.03, label=prop.r), position = position_dodge(width=0.9), size=3) + theme_bw() + labs(y = "Weighted average proportion variance") + theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_fill_hue(l=40) + ylim(0,1)
## Sponge data
form.sponge <- ~ sponge.trt + sponge.batch
info.sponge = as.data.frame(cbind(rownames(sponge.tss.clr),sponge.trt,sponge.batch))
rownames(info.sponge) = rownames(sponge.tss.clr)
# before
varPart.sponge.before <- fitExtractVarPartModel(t(sponge.tss.clr), form.sponge, info.sponge)
# BMC
varPart.sponge.bmc <- fitExtractVarPartModel(t(sponge.bmc), form.sponge, info.sponge)
# combat
varPart.sponge.combat <- fitExtractVarPartModel(t(sponge.combat), form.sponge, info.sponge)
# removeBatchEffect
varPart.sponge.limma <- fitExtractVarPartModel(t(sponge.limma), form.sponge, info.sponge)
# percentile normalisation
varPart.sponge.percentile <- fitExtractVarPartModel(t(sponge.percentile), form.sponge, info.sponge)
# svd
varPart.sponge.svd <- fitExtractVarPartModel(t(sponge.svd), form.sponge, info.sponge)
################
#merge them
variance.sponge =  rbind(cbind(variance = varPart.sponge.before$gel.batch,Type = rep('Batch',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.before$Tissue.trt,Type = rep('Tissue',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.bmc$gel.batch,Type = rep('Batch',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.bmc$Tissue.trt,Type = rep('Tissue',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.combat$gel.batch,Type = rep('Batch',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.combat$Tissue.trt,Type = rep('Tissue',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.limma$gel.batch,Type = rep('Batch',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.limma$Tissue.trt,Type = rep('Tissue',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.percentile$gel.batch,Type = rep('Batch',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.percentile$Tissue.trt,Type = rep('Tissue',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.svd$gel.batch,Type = rep('Batch',24), method = rep('SVD',24)),
cbind(variance = varPart.sponge.svd$Tissue.trt,Type = rep('Tissue',24), method = rep('SVD',24)))
variance.sponge = as.data.frame(variance.sponge)
variance.sponge$Type = factor(variance.sponge$Type,levels = unique(variance.sponge$Type))
variance.sponge$method = factor(variance.sponge$method,levels = unique(variance.sponge$method))
variance.sponge$variance = as.numeric(as.character(variance.sponge$variance))
## Sponge data
form.sponge <- ~ sponge.trt + sponge.batch
info.sponge = as.data.frame(cbind(rownames(sponge.tss.clr),sponge.trt,sponge.batch))
rownames(info.sponge) = rownames(sponge.tss.clr)
# before
varPart.sponge.before <- fitExtractVarPartModel(t(sponge.tss.clr), form.sponge, info.sponge)
# BMC
varPart.sponge.bmc <- fitExtractVarPartModel(t(sponge.bmc), form.sponge, info.sponge)
# combat
varPart.sponge.combat <- fitExtractVarPartModel(t(sponge.combat), form.sponge, info.sponge)
# removeBatchEffect
varPart.sponge.limma <- fitExtractVarPartModel(t(sponge.limma), form.sponge, info.sponge)
# percentile normalisation
varPart.sponge.percentile <- fitExtractVarPartModel(t(sponge.percentile), form.sponge, info.sponge)
# svd
varPart.sponge.svd <- fitExtractVarPartModel(t(sponge.svd), form.sponge, info.sponge)
################
#merge them
variance.sponge =  rbind(cbind(variance = varPart.sponge.before$sponge.batch,Type = rep('Batch',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.before$sponge.trt,Type = rep('Tissue',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.bmc$sponge.batch,Type = rep('Batch',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.bmc$sponge.trt,Type = rep('Tissue',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.combat$sponge.batch,Type = rep('Batch',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.combat$sponge.trt,Type = rep('Tissue',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.limma$sponge.batch,Type = rep('Batch',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.limma$sponge.trt,Type = rep('Tissue',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.percentile$sponge.batch,Type = rep('Batch',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.percentile$sponge.trt,Type = rep('Tissue',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.svd$sponge.batch,Type = rep('Batch',24), method = rep('SVD',24)),
cbind(variance = varPart.sponge.svd$sponge.trt,Type = rep('Tissue',24), method = rep('SVD',24)))
variance.sponge = as.data.frame(variance.sponge)
variance.sponge$Type = factor(variance.sponge$Type,levels = unique(variance.sponge$Type))
variance.sponge$method = factor(variance.sponge$method,levels = unique(variance.sponge$method))
variance.sponge$variance = as.numeric(as.character(variance.sponge$variance))
ggplot(variance.sponge, aes(x=Type, y=variance,fill=Type)) + geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + labs(x = "Type", y = "Proportion Variance",name='Type') + ylim(0,1)
##########
# AD data
form.ad <- ~ concentration.trt + time.batch
info.ad = as.data.frame(cbind(rownames(ad.tss.clr),concentration.trt,time.batch))
## Sponge data
form.sponge <- ~ sponge.trt + sponge.batch
info.sponge = as.data.frame(cbind(rownames(sponge.tss.clr),sponge.trt,sponge.batch))
rownames(info.sponge) = rownames(sponge.tss.clr)
# before
varPart.sponge.before <- fitExtractVarPartModel(t(sponge.tss.clr), form.sponge, info.sponge)
# BMC
varPart.sponge.bmc <- fitExtractVarPartModel(t(sponge.bmc), form.sponge, info.sponge)
# combat
varPart.sponge.combat <- fitExtractVarPartModel(t(sponge.combat), form.sponge, info.sponge)
# removeBatchEffect
varPart.sponge.limma <- fitExtractVarPartModel(t(sponge.limma), form.sponge, info.sponge)
# percentile normalisation
varPart.sponge.percentile <- fitExtractVarPartModel(t(sponge.percentile), form.sponge, info.sponge)
# svd
varPart.sponge.svd <- fitExtractVarPartModel(t(sponge.svd), form.sponge, info.sponge)
################
#merge them
variance.sponge =  rbind(cbind(variance = varPart.sponge.before$sponge.batch,Type = rep('Batch',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.before$sponge.trt,Type = rep('Tissue',24), method = rep('Before',24)),
cbind(variance = varPart.sponge.bmc$sponge.batch,Type = rep('Batch',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.bmc$sponge.trt,Type = rep('Tissue',24), method = rep('BMC',24)),
cbind(variance = varPart.sponge.combat$sponge.batch,Type = rep('Batch',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.combat$sponge.trt,Type = rep('Tissue',24), method = rep('ComBat',24)),
cbind(variance = varPart.sponge.limma$sponge.batch,Type = rep('Batch',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.limma$sponge.trt,Type = rep('Tissue',24), method = rep('rBE',24)),
cbind(variance = varPart.sponge.percentile$sponge.batch,Type = rep('Batch',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.percentile$sponge.trt,Type = rep('Tissue',24), method = rep('PN',24)),
cbind(variance = varPart.sponge.svd$sponge.batch,Type = rep('Batch',24), method = rep('SVD',24)),
cbind(variance = varPart.sponge.svd$sponge.trt,Type = rep('Tissue',24), method = rep('SVD',24)))
variance.sponge = as.data.frame(variance.sponge)
variance.sponge$Type = factor(variance.sponge$Type,levels = unique(variance.sponge$Type))
variance.sponge$method = factor(variance.sponge$method,levels = unique(variance.sponge$method))
variance.sponge$variance = as.numeric(as.character(variance.sponge$variance))
ggplot(variance.sponge, aes(x=Type, y=variance,fill=Type)) + geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + labs(x = "Type", y = "Proportion Variance",name='Type') + ylim(0,1)
##########
# AD data
form.ad <- ~ ad.trt + ad.batch
info.ad = as.data.frame(cbind(rownames(ad.tss.clr),ad.trt,ad.batch))
rownames(info.ad) = rownames(ad.tss.clr)
# before
varPart.ad.before <- fitExtractVarPartModel(t(ad.tss.clr), form.ad, info.ad)
# BMC
varPart.ad.bmc <- fitExtractVarPartModel(t(ad.bmc), form.ad, info.ad)
# combat
varPart.ad.combat <- fitExtractVarPartModel(t(ad.combat), form.ad, info.ad)
# removeBatchEffect
varPart.ad.limma <- fitExtractVarPartModel(t(ad.limma), form.ad, info.ad)
# percentile normalisation
varPart.ad.percentile <- fitExtractVarPartModel(t(ad.percentile), form.ad, info.ad)
# svd
varPart.ad.svd <- fitExtractVarPartModel(t(ad.svd), form.ad, info.ad)
# ruv
varPart.ad.ruv <- fitExtractVarPartModel(t(ad.ruv), form.ad, info.ad)
################
#merge them
variance.ad =  rbind(cbind(variance = varPart.ad.before$ad.batch,Type = rep('Batch',231), method = rep('Before',231)),
cbind(variance = varPart.ad.before$ad.trt,Type = rep('Treatment',231), method = rep('Before',231)),
cbind(variance = varPart.ad.bmc$ad.batch,Type = rep('Batch',231), method = rep('BMC',231)),
cbind(variance = varPart.ad.bmc$ad.trt,Type = rep('Treatment',231), method = rep('BMC',231)),
cbind(variance = varPart.ad.combat$ad.batch,Type = rep('Batch',231), method = rep('ComBat',231)),
cbind(variance = varPart.ad.combat$ad.trt,Type = rep('Treatment',231), method = rep('ComBat',231)),
cbind(variance = varPart.ad.limma$ad.batch,Type = rep('Batch',231), method = rep('rBE',231)),
cbind(variance = varPart.ad.limma$ad.trt,Type = rep('Treatment',231), method = rep('rBE',231)),
cbind(variance = varPart.ad.percentile$ad.batch,Type = rep('Batch',231), method = rep('PN',231)),
cbind(variance = varPart.ad.percentile$ad.trt,Type = rep('Treatment',231), method = rep('PN',231)),
cbind(variance = varPart.ad.svd$ad.batch,Type = rep('Batch',231), method = rep('SVD',231)),
cbind(variance = varPart.ad.svd$ad.trt,Type = rep('Treatment',231), method = rep('SVD',231)), cbind(variance = varPart.ad.ruv$ad.batch,Type = rep('Batch',231), method = rep('RUVIII',231)),
cbind(variance = varPart.ad.ruv$ad.trt,Type = rep('Treatment',231), method = rep('RUVIII',231)))
variance.ad = as.data.frame(variance.ad)
variance.ad$Type = factor(variance.ad$Type,levels = unique(variance.ad$Type))
variance.ad$method = factor(variance.ad$method,levels = unique(variance.ad$method))
variance.ad$variance = as.numeric(as.character(variance.ad$variance))
ggplot(variance.ad, aes(x=Type, y=variance,fill=Type)) + geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=11),panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + labs(x = "Type", y = "Proportion Variance",name='Type') + scale_fill_hue(l=40) + ylim(0,1)
###################
# Sponge data
silh.sponge.before = calc.sil(pca.sponge.before$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
silh.sponge.bmc = calc.sil(pca.sponge.bmc$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
silh.sponge.combat = calc.sil(pca.sponge.combat$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
silh.sponge.limma = calc.sil(pca.sponge.limma$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
silh.sponge.percentile = calc.sil(pca.sponge.percentile$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
silh.sponge.svd = calc.sil(pca.sponge.svd$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
data.plot.sponge = rbind(silh.sponge.before, silh.sponge.bmc, silh.sponge.combat, silh.sponge.limma, silh.sponge.percentile, silh.sponge.svd)
data.plot.sponge$method = c(rep('Before', nrow(silh.sponge.before)),
rep('BMC', nrow(silh.sponge.bmc)),
rep('ComBat', nrow(silh.sponge.combat)),
rep('rBE', nrow(silh.sponge.limma)),
rep('PN', nrow(silh.sponge.percentile)),
rep('SVD', nrow(silh.sponge.svd))
)
data.plot.sponge$method = factor(data.plot.sponge$method,levels = unique(data.plot.sponge$method))
data.plot.sponge$Cluster =  factor(data.plot.sponge$Cluster, levels = unique(data.plot.sponge$Cluster))
data.plot.sponge$Type =  factor(data.plot.sponge$Type, levels = unique(data.plot.sponge$Type))
ggplot(data.plot.sponge, aes(x=Type, y=silh.coeff, color = Cluster, shape = Type)) + geom_point() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(), axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_color_manual(values = c("#388ECC","#F68B33","#F0E442","#D55E00")) + labs(x = "Type", y = "Silhouette Coefficient", name="Type")
############
# AD data
silh.ad.before = calc.sil(pca.ad.before$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.bmc = calc.sil(pca.ad.bmc$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.combat = calc.sil(pca.ad.combat$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.limma = calc.sil(pca.ad.limma$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.percentile = calc.sil(pca.ad.percentile$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.svd = calc.sil(pca.ad.svd$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
silh.ad.ruv = calc.sil(pca.ad.ruv$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
data.plot.ad = rbind(silh.ad.before, silh.ad.bmc, silh.ad.combat, silh.ad.limma, silh.ad.percentile, silh.ad.svd,silh.ad.ruv)
data.plot.ad$method = c(rep('Before', nrow(silh.ad.before)),
rep('BMC', nrow(silh.ad.bmc)),
rep('ComBat', nrow(silh.ad.combat)),
rep('rBE', nrow(silh.ad.limma)),
rep('PN', nrow(silh.ad.percentile)),
rep('SVD', nrow(silh.ad.svd)),
rep('RUVIII', nrow(silh.ad.ruv))
)
data.plot.ad$method = factor(data.plot.ad$method, levels = unique(data.plot.ad$method))
data.plot.ad$Cluster =  factor(data.plot.ad$Cluster, levels = unique(data.plot.ad$Cluster))
data.plot.ad$Type =  factor(data.plot.ad$Type, levels = unique(data.plot.ad$Type))
ggplot(data.plot.ad, aes(x=Type, y=silh.coeff, color = Cluster, shape = Type)) + geom_point() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(),axis.text = element_text(size=10),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_color_manual(values=c("#388ECC", "#F68B33", "#C2C2C2", "#009E73", "#CC79A7","#0072B2", "#999999")) + labs(x = "Type", y = "Silhouette Coefficient", name="Type")
## Create the simulated data
m = 50
n = 10000
nc = 1000 #negative controls without treatment effects
p = 1
k = 1
ctl = rep(FALSE, n)
ctl[1:nc] = TRUE
# treatment effect
X = matrix(c(rep(0,floor(m/2)), rep(1,ceiling(m/2))), m, p)
beta = matrix(rnorm(p*n,5,1), p, n) #treatment coefficients
beta[,ctl] = 0
# batch effect
W = as.matrix(rep(0,m),m,k)
W[c(1:12,38:50),1] =  1
alpha = matrix(rnorm(k*n,5,1),k,n)
Y_alpha = sapply(alpha, function(alpha){rnorm(m, mean =  alpha, abs(rnorm(1, mean = 0, sd = 2)))})
YY_alpha = apply(Y_alpha,2,function(x){x*W})
epsilon = matrix(rnorm(m*n,0,1),m,n)
Y = X%*%beta + YY_alpha + epsilon
# estimate batch coefficient for each OTU
w.cof = c()
for(i in 1:ncol(Y)){
res = lm(Y[,i] ~ X + W)
sum.res = summary(res)
w.cof[i] = sum.res$coefficients[3,1]
}
par(mfrow=c(2,2))
hist(w.cof,col = 'gray')
plot(density(w.cof))
qqnorm(w.cof)
qqline(w.cof, col='red')
par(mfrow=c(1,1))
## Create the simulated data
m = 50
n = 10000
nc = 1000 #negative controls without treatment effects
p = 1
k = 1
ctl = rep(FALSE, n)
ctl[1:nc] = TRUE
# treatment effect
X = matrix(c(rep(0,floor(m/2)), rep(1,ceiling(m/2))), m, p)
beta = matrix(rnorm(p*n,5,1), p, n) #treatment coefficients
beta[,ctl] = 0
# batch effect
W = as.matrix(rep(0,m),m,k)
W[c(1:12,38:50),1] =  1
alpha2 = matrix(sample(c(rnorm(k*(3*n/4),0,1),rnorm(k*(n/4),5,1)),n),k,n)
Y_alpha2 = sapply(alpha2, function(alpha){rnorm(m, mean =  alpha, sd = abs(rnorm(1, mean = 0, sd = 2)) )})
YY_alpha2 = apply(Y_alpha2,2,function(x){x*W})
epsilon = matrix(rnorm(m*n,0,1),m,n)
Y2 = X%*%beta + YY_alpha2 + epsilon
w.cof2 = c()
for(i in 1:ncol(Y2)){
res = lm(Y2[,i] ~ X + W)
sum.res = summary(res)
w.cof2[i] = sum.res$coefficients[3,1]
}
par(mfrow=c(2,2))
hist(w.cof2,col = 'gray')
plot(density(w.cof2))
qqnorm(w.cof2)
qqline(w.cof2, col='red')
par(mfrow=c(1,1))
sponge.b.cof = c()
for(i in 1:ncol(sponge.tss.clr)){
res = lm(sponge.tss.clr[,i] ~ sponge.trt + sponge.batch)
sum.res = summary(res)
sponge.b.cof[i] = sum.res$coefficients[3,1]
}
par(mfrow=c(2,2))
hist(sponge.b.cof,col = 'gray')
plot(density(sponge.b.cof))
qqnorm(sponge.b.cof)
qqline(sponge.b.cof, col='red')
par(mfrow=c(1,1))
ad.b.cof = c()
ad.batch.relevel = relevel(ad.batch, '01/07/2016')
for(i in 1:ncol(ad.tss.clr)){
res = lm(ad.tss.clr[,i] ~ ad.trt + ad.batch.relevel)
sum.res = summary(res)
ad.b.cof[i] = sum.res$coefficients[4,1]
}
par(mfrow=c(2,2))
hist(ad.b.cof,col = 'gray')
plot(density(ad.b.cof))
qqnorm(ad.b.cof)
qqline(ad.b.cof, col='red')
par(mfrow=c(1,1))
