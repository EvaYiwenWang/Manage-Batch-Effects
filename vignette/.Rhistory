hd.k = ifelse(hd.k !=0, hd.k, 1)
hd.ruv4 <- RUV4(Y = hd.tss.clr, X = hd.trt, ctl = hd.nc, k = hd.k)
hd.ruv4.trt_p <- hd.ruv4$p
hd.ruv4.trt_q <- p.adjust(hd.ruv4.trt_p,method="fdr")
# Sponge data
sponge.b1 = scale(sponge.tss.clr[sponge.batch== 1,],center = TRUE, scale = FALSE)
sponge.b2 = scale(sponge.tss.clr[sponge.batch== 2,],center = TRUE, scale = FALSE)
sponge.bmc = rbind(sponge.b1,sponge.b2)
sponge.bmc = sponge.bmc[rownames(sponge.tss.clr),]
##############
# AD data
ad.b1 = scale(ad.tss.clr[ad.batch=="09/04/2015",],center = TRUE, scale = FALSE)
ad.b2 = scale(ad.tss.clr[ad.batch=="14/04/2016",],center = TRUE, scale = FALSE)
ad.b3 = scale(ad.tss.clr[ad.batch=="14/11/2016",],center = TRUE, scale = FALSE)
ad.b4 = scale(ad.tss.clr[ad.batch=="01/07/2016",],center = TRUE, scale = FALSE)
ad.b5 = scale(ad.tss.clr[ad.batch=="21/09/2017",],center = TRUE, scale = FALSE)
ad.bmc = rbind(ad.b1,ad.b2,ad.b3,ad.b4,ad.b5)
ad.bmc = ad.bmc[rownames(ad.tss.clr),]
# Sponge data
sponge.combat <- t(ComBat(t(sponge.tss.clr),batch=sponge.batch,mod = sponge.mod,par.prior=F,prior.plots = F))
##############
# AD data
ad.combat <- t(ComBat(t(ad.tss.clr),batch=ad.batch,mod = ad.mod, par.prior=F,prior.plots = F))
# Sponge data
sponge.limma <- t(removeBatchEffect(t(sponge.tss.clr),batch = sponge.batch,design = sponge.mod))
#############
ad.limma <- t(removeBatchEffect(t(ad.tss.clr),batch = ad.batch,design = ad.mod))
# sponge data
sponge.fabatch.obj = fabatch(x = sponge.tss.clr,y = as.factor(as.numeric(sponge.trt)), batch = sponge.batch)
sponge.fabatch <- sponge.fabatch.obj$xadj
# ad data
ad.fabatch.obj = fabatch(x = ad.tss.clr,y = as.factor(as.numeric(ad.trt)), batch = as.factor(as.numeric(ad.batch)))
ad.fabatch <- ad.fabatch.obj$xadj
sponge.percentile = percentile_norm(data = sponge.tss, batch = sponge.batch, trt = sponge.trt)
# ad data
ad.percentile = percentile_norm(data = ad.tss, batch = ad.batch, trt = ad.trt)
#################
# sponge data
sponge.sd = apply(sponge.tss.clr,2,sd)
sponge.mean = apply(sponge.tss.clr,2,mean)
sponge.X = scale(sponge.tss.clr,center = T,scale = T)
sponge.m = crossprod(sponge.X)
sponge.m.svd = svd(sponge.m)
#barplot(sponge.m.svd$d)
sponge.a1 = sponge.m.svd$u[,1]
sponge.b1 = sponge.m.svd$v[,1]
# component 1
sponge.t1 = sponge.X %*% sponge.a1 / drop(sqrt(crossprod(sponge.a1)))
sponge.c1 = crossprod(sponge.X, sponge.t1) / drop(crossprod(sponge.t1))
sponge.svd.defl.matrix1  = sponge.X - sponge.t1 %*% t(sponge.c1)
## add back mean and variance
sponge.svd = sponge.svd.defl.matrix1
sponge.svd[1:nrow(sponge.svd),1:ncol(sponge.svd)] = NA
for(i in 1:ncol(sponge.svd.defl.matrix1)){
for(j in 1:nrow(sponge.svd.defl.matrix1)){
sponge.svd[j,i] = sponge.svd.defl.matrix1[j,i]*sponge.sd[i] + sponge.mean[i]
}
}
#####################
# ad data
ad.sd = apply(ad.tss.clr,2,sd)
ad.mean = apply(ad.tss.clr,2,mean)
ad.X = scale(ad.tss.clr,center = T,scale = T)
ad.m = crossprod(ad.X)
ad.m.svd = svd(ad.m)
barplot(ad.m.svd$d)
ad.a1 = ad.m.svd$u[,1]
ad.b1 = ad.m.svd$v[,1]
# component 1
ad.t1 = ad.X %*% ad.a1 / drop(sqrt(crossprod(ad.a1)))
ad.c1 = crossprod(ad.X, ad.t1) / drop(crossprod(ad.t1))
ad.svd.defl.matrix1  = ad.X - ad.t1 %*% t(ad.c1)
# #
ad.svd = ad.svd.defl.matrix1
ad.svd[1:nrow(ad.svd),1:ncol(ad.svd)] = NA
for(i in 1:ncol(ad.svd.defl.matrix1)){
for(j in 1:nrow(ad.svd.defl.matrix1)){
ad.svd[j,i] = ad.svd.defl.matrix1[j,i]*ad.sd[i] + ad.mean[i]
}
}
#####################
# ad data only
ad.replicates = ad.metadata$sample_name.data.extraction
ad.replicates.matrix = replicate.matrix(ad.replicates)
ad.ruvIII <- RUVIII(Y=ad.tss.clr,M = ad.replicates.matrix, ctl = ad.nc)
rownames(ad.ruvIII) = rownames(ad.tss.clr)
# sponge data
sponge.pca.before = pca(sponge.tss.clr, ncomp = 3)
sponge.pca.bmc = pca(sponge.bmc, ncomp = 3)
sponge.pca.combat = pca(sponge.combat, ncomp = 3)
sponge.pca.limma = pca(sponge.limma, ncomp = 3)
sponge.pca.percentile = pca(sponge.percentile, ncomp = 3)
sponge.pca.svd = pca(sponge.svd, ncomp = 3)
# ad data
ad.pca.before = pca(ad.tss.clr, ncomp = 3)
ad.pca.bmc = pca(ad.bmc, ncomp = 3)
ad.pca.combat = pca(ad.combat, ncomp = 3)
ad.pca.limma = pca(ad.limma, ncomp = 3)
ad.pca.percentile = pca(ad.percentile, ncomp = 3)
ad.pca.svd = pca(ad.svd, ncomp = 3)
ad.pca.ruv = pca(ad.ruvIII, ncomp = 3)
### sponge data
sponge.pca.plot.before = Scatter_Density(data = sponge.pca.before$variates$X,batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.before$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Before batch correction (Sponge)',title.cex = 1,legend.title.cex = 0.6)
sponge.pca.plot.bmc = Scatter_Density(data = sponge.pca.bmc$variates$X,batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.bmc$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Batch correction with BMC (Sponge)',title.cex = 1,legend.title.cex = 0.6)
sponge.pca.plot.combat = Scatter_Density(data = sponge.pca.combat$variates$X,batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.combat$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Batch correction with ComBat (Sponge)',title.cex = 1,legend.title.cex = 0.6)
sponge.pca.plot.limma = Scatter_Density(data = sponge.pca.limma$variates$X,batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.limma$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Batch correction with rBE (Sponge)',title.cex = 1,legend.title.cex = 0.6)
sponge.pca.plot.percentile = Scatter_Density(data = sponge.pca.percentile$variates$X,batch = sponge.batch, trt = sponge.trt,expl.var = sponge.pca.percentile$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Batch correction with PN (Sponge)',title.cex = 1,legend.title.cex = 0.6)
sponge.pca.plot.svd = Scatter_Density(data = sponge.pca.svd$variates$X,batch = sponge.batch, trt = sponge.trt,expl.var = sponge.pca.svd$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Batch correction with SVD (Sponge)',title.cex = 1,legend.title.cex = 0.6)
grid.arrange(sponge.pca.plot.before, sponge.pca.plot.bmc, sponge.pca.plot.combat,sponge.pca.plot.limma,ncol=2)
grid.arrange(sponge.pca.plot.before, sponge.pca.plot.percentile,sponge.pca.plot.svd,ncol=2)
# ad data
ad.pca.plot.before = Scatter_Density(data = ad.pca.before$variates$X, batch = ad.batch, trt = ad.trt, expl.var = ad.pca.before$explained_variance, xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Before batch correction (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.bmc = Scatter_Density(data = ad.pca.bmc$variates$X, batch = ad.batch, trt = ad.trt, expl.var = ad.pca.bmc$explained_variance, xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with BMC (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.combat = Scatter_Density(data = ad.pca.combat$variates$X, batch = ad.batch, trt = ad.trt, expl.var = ad.pca.combat$explained_variance, xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with ComBat (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.limma = Scatter_Density(data = ad.pca.limma$variates$X, batch = ad.batch, trt = ad.trt, expl.var = ad.pca.limma$explained_variance, xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with rBE (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.percentile = Scatter_Density(data = ad.pca.percentile$variates$X,batch = ad.batch, trt = ad.trt, expl.var = ad.pca.percentile$explained_variance,xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with PN (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.svd = Scatter_Density(data = ad.pca.svd$variates$X,batch = ad.batch, trt = ad.trt, expl.var = ad.pca.svd$explained_variance,xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with SVD (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
ad.pca.plot.ruv = Scatter_Density(data = ad.pca.ruv$variates$X,batch = ad.batch, trt = ad.trt, expl.var = ad.pca.ruv$explained_variance,xlim = c(-15,14), ylim = c(-13,14), batch.legend.title = 'Date (batch)', trt.legend.title = 'Conc (trt)',title = 'Batch correction with RUVIII (AD)',title.cex = 1,legend.cex = 0.4,legend.title.cex = 0.6)
grid.arrange(ad.pca.plot.before, ad.pca.plot.bmc, ad.pca.plot.combat,ad.pca.plot.limma,ncol=2)
grid.arrange(ad.pca.plot.before, ad.pca.plot.percentile,ad.pca.plot.svd,ad.pca.plot.ruv,ncol=2)
###############
## sponge data
sponge.before.df = data.frame(value = sponge.tss.clr[,9], batch = sponge.batch)
sponge.boxplot.before <- box_plot_fun(data = sponge.before.df,x=sponge.before.df$batch,
y=sponge.before.df$value,title = 'OTU9 - before (Sponge)',
batch.legend.title = 'Gel (batch)')
sponge.bmc.df = data.frame(value = sponge.bmc[,9], batch = sponge.batch)
sponge.boxplot.bmc <-box_plot_fun(data = sponge.bmc.df,x=sponge.bmc.df$batch,
y=sponge.bmc.df$value,title = 'OTU9 - BMC (Sponge)',
batch.legend.title = 'Gel (batch)')
sponge.combat.df = data.frame(value = sponge.combat[,9], batch = sponge.batch)
sponge.boxplot.combat <-box_plot_fun(data = sponge.combat.df,x=sponge.combat.df$batch,
y=sponge.combat.df$value,title = 'OTU9 - ComBat (Sponge)',
batch.legend.title = 'Gel (batch)')
sponge.limma.df = data.frame(value = sponge.limma[,9], batch = sponge.batch)
sponge.boxplot.limma <-box_plot_fun(data = sponge.limma.df,x=sponge.limma.df$batch,
y=sponge.limma.df$value,title = 'OTU9 - rBE(Sponge)',
batch.legend.title = 'Gel (batch)')
sponge.percentile.df = data.frame(value = sponge.percentile[,9], batch = sponge.batch)
sponge.boxplot.percentile <-box_plot_fun(data = sponge.percentile.df,x=sponge.percentile.df$batch,
y=sponge.percentile.df$value,title = 'OTU9 - PN (Sponge)',
batch.legend.title = 'Gel (batch)')
sponge.svd.df = data.frame(value = sponge.svd[,9], batch = sponge.batch)
sponge.boxplot.svd <-box_plot_fun(data = sponge.svd.df,x=sponge.svd.df$batch,
y=sponge.svd.df$value,title = 'OTU9 - SVD (Sponge)',
batch.legend.title = 'Gel (batch)')
grid.arrange(sponge.boxplot.before, sponge.boxplot.bmc, sponge.boxplot.combat, sponge.boxplot.limma,ncol=2)
grid.arrange(sponge.boxplot.before, sponge.boxplot.percentile,sponge.boxplot.svd,ncol=2)
## Sponge data
sponge.form <- ~ sponge.trt + sponge.batch
sponge.info = as.data.frame(cbind(rownames(sponge.tss.clr),sponge.trt,sponge.batch))
rownames(sponge.info) = rownames(sponge.tss.clr)
# before
sponge.varPart.before <- fitExtractVarPartModel(t(sponge.tss.clr), sponge.form, sponge.info)
# BMC
sponge.varPart.bmc <- fitExtractVarPartModel(t(sponge.bmc), sponge.form, sponge.info)
# combat
sponge.varPart.combat <- fitExtractVarPartModel(t(sponge.combat), sponge.form, sponge.info)
# removeBatchEffect
sponge.varPart.limma <- fitExtractVarPartModel(t(sponge.limma), sponge.form, sponge.info)
# percentile normalisation
sponge.varPart.percentile <- fitExtractVarPartModel(t(sponge.percentile), sponge.form, sponge.info)
# svd
sponge.varPart.svd <- fitExtractVarPartModel(t(sponge.svd), sponge.form, sponge.info)
################
#merge them
sponge.variance =  rbind(cbind(variance = sponge.varPart.before$sponge.batch,Type = rep('Batch',24), method = rep('Before',24)),
cbind(variance = sponge.varPart.before$sponge.trt,Type = rep('Tissue',24), method = rep('Before',24)),
cbind(variance = sponge.varPart.bmc$sponge.batch,Type = rep('Batch',24), method = rep('BMC',24)),
cbind(variance = sponge.varPart.bmc$sponge.trt,Type = rep('Tissue',24), method = rep('BMC',24)),
cbind(variance = sponge.varPart.combat$sponge.batch,Type = rep('Batch',24), method = rep('ComBat',24)),
cbind(variance = sponge.varPart.combat$sponge.trt,Type = rep('Tissue',24), method = rep('ComBat',24)),
cbind(variance = sponge.varPart.limma$sponge.batch,Type = rep('Batch',24), method = rep('rBE',24)),
cbind(variance = sponge.varPart.limma$sponge.trt,Type = rep('Tissue',24), method = rep('rBE',24)),
cbind(variance = sponge.varPart.percentile$sponge.batch,Type = rep('Batch',24), method = rep('PN',24)),
cbind(variance = sponge.varPart.percentile$sponge.trt,Type = rep('Tissue',24), method = rep('PN',24)),
cbind(variance = sponge.varPart.svd$sponge.batch,Type = rep('Batch',24), method = rep('SVD',24)),
cbind(variance = sponge.varPart.svd$sponge.trt,Type = rep('Tissue',24), method = rep('SVD',24)))
sponge.variance = as.data.frame(sponge.variance)
sponge.variance$Type = factor(sponge.variance$Type,levels = unique(sponge.variance$Type))
sponge.variance$method = factor(sponge.variance$method,levels = unique(sponge.variance$method))
sponge.variance$variance = as.numeric(as.character(sponge.variance$variance))
ggplot(sponge.variance, aes(x=Type, y=variance,fill=Type)) + geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + labs(x = "Type", y = "Proportion Variance",name='Type') + ylim(0,1)
##########
# AD data
ad.form <- ~ ad.trt + ad.batch
ad.info = as.data.frame(cbind(rownames(ad.tss.clr),ad.trt,ad.batch))
rownames(ad.info) = rownames(ad.tss.clr)
# before
ad.varPart.before <- fitExtractVarPartModel(t(ad.tss.clr), ad.form, ad.info)
# BMC
ad.varPart.bmc <- fitExtractVarPartModel(t(ad.bmc), ad.form, ad.info)
# combat
ad.varPart.combat <- fitExtractVarPartModel(t(ad.combat), ad.form, ad.info)
# removeBatchEffect
ad.varPart.limma <- fitExtractVarPartModel(t(ad.limma), ad.form, ad.info)
# percentile normalisation
ad.varPart.percentile <- fitExtractVarPartModel(t(ad.percentile), ad.form, ad.info)
# svd
ad.varPart.svd <- fitExtractVarPartModel(t(ad.svd), ad.form, ad.info)
# ruv
ad.varPart.ruv <- fitExtractVarPartModel(t(ad.ruvIII), ad.form, ad.info)
################
#merge them
ad.variance =  rbind(cbind(variance = ad.varPart.before$ad.batch,Type = rep('Batch',231), method = rep('Before',231)),
cbind(variance = ad.varPart.before$ad.trt,Type = rep('Treatment',231), method = rep('Before',231)),
cbind(variance = ad.varPart.bmc$ad.batch,Type = rep('Batch',231), method = rep('BMC',231)),
cbind(variance = ad.varPart.bmc$ad.trt,Type = rep('Treatment',231), method = rep('BMC',231)),
cbind(variance = ad.varPart.combat$ad.batch,Type = rep('Batch',231), method = rep('ComBat',231)),
cbind(variance = ad.varPart.combat$ad.trt,Type = rep('Treatment',231), method = rep('ComBat',231)),
cbind(variance = ad.varPart.limma$ad.batch,Type = rep('Batch',231), method = rep('rBE',231)),
cbind(variance = ad.varPart.limma$ad.trt,Type = rep('Treatment',231), method = rep('rBE',231)),
cbind(variance = ad.varPart.percentile$ad.batch,Type = rep('Batch',231), method = rep('PN',231)),
cbind(variance = ad.varPart.percentile$ad.trt,Type = rep('Treatment',231), method = rep('PN',231)),
cbind(variance = ad.varPart.svd$ad.batch,Type = rep('Batch',231), method = rep('SVD',231)),
cbind(variance = ad.varPart.svd$ad.trt,Type = rep('Treatment',231), method = rep('SVD',231)), cbind(variance = varPart.ad.ruv$ad.batch,Type = rep('Batch',231), method = rep('RUVIII',231)),
cbind(variance = ad.varPart.ruv$ad.trt,Type = rep('Treatment',231), method = rep('RUVIII',231)))
##########
# AD data
ad.form <- ~ ad.trt + ad.batch
ad.info = as.data.frame(cbind(rownames(ad.tss.clr),ad.trt,ad.batch))
rownames(ad.info) = rownames(ad.tss.clr)
# before
ad.varPart.before <- fitExtractVarPartModel(t(ad.tss.clr), ad.form, ad.info)
# BMC
ad.varPart.bmc <- fitExtractVarPartModel(t(ad.bmc), ad.form, ad.info)
# combat
ad.varPart.combat <- fitExtractVarPartModel(t(ad.combat), ad.form, ad.info)
# removeBatchEffect
ad.varPart.limma <- fitExtractVarPartModel(t(ad.limma), ad.form, ad.info)
# percentile normalisation
ad.varPart.percentile <- fitExtractVarPartModel(t(ad.percentile), ad.form, ad.info)
# svd
ad.varPart.svd <- fitExtractVarPartModel(t(ad.svd), ad.form, ad.info)
# ruv
ad.varPart.ruv <- fitExtractVarPartModel(t(ad.ruvIII), ad.form, ad.info)
################
#merge them
ad.variance =  rbind(cbind(variance = ad.varPart.before$ad.batch,Type = rep('Batch',231), method = rep('Before',231)),
cbind(variance = ad.varPart.before$ad.trt,Type = rep('Treatment',231), method = rep('Before',231)),
cbind(variance = ad.varPart.bmc$ad.batch,Type = rep('Batch',231), method = rep('BMC',231)),
cbind(variance = ad.varPart.bmc$ad.trt,Type = rep('Treatment',231), method = rep('BMC',231)),
cbind(variance = ad.varPart.combat$ad.batch,Type = rep('Batch',231), method = rep('ComBat',231)),
cbind(variance = ad.varPart.combat$ad.trt,Type = rep('Treatment',231), method = rep('ComBat',231)),
cbind(variance = ad.varPart.limma$ad.batch,Type = rep('Batch',231), method = rep('rBE',231)),
cbind(variance = ad.varPart.limma$ad.trt,Type = rep('Treatment',231), method = rep('rBE',231)),
cbind(variance = ad.varPart.percentile$ad.batch,Type = rep('Batch',231), method = rep('PN',231)),
cbind(variance = ad.varPart.percentile$ad.trt,Type = rep('Treatment',231), method = rep('PN',231)),
cbind(variance = ad.varPart.svd$ad.batch,Type = rep('Batch',231), method = rep('SVD',231)),
cbind(variance = ad.varPart.svd$ad.trt,Type = rep('Treatment',231), method = rep('SVD',231)), cbind(variance = ad.varPart.ruv$ad.batch,Type = rep('Batch',231), method = rep('RUVIII',231)),
cbind(variance = ad.varPart.ruv$ad.trt,Type = rep('Treatment',231), method = rep('RUVIII',231)))
ad.variance = as.data.frame(ad.variance)
ad.variance$Type = factor(ad.variance$Type,levels = unique(ad.variance$Type))
ad.variance$method = factor(ad.variance$method,levels = unique(ad.variance$method))
ad.variance$variance = as.numeric(as.character(ad.variance$variance))
ggplot(ad.variance, aes(x=Type, y=variance,fill=Type)) + geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=11),panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + labs(x = "Type", y = "Proportion Variance",name='Type') + scale_fill_hue(l=40) + ylim(0,1)
# AD data
ad.data.design = numeric()
ad.data.design$group = ad.trt
ad.data.design$batch = ad.batch
# before
# conditioning on a batch effect
ad.rda.before1 = rda(ad.tss.clr ~ group + Condition(batch), data = ad.data.design)
ad.rda.before2 = rda(ad.tss.clr ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.before = ad.rda.before1$pCCA$tot.chi*100/ad.rda.before1$tot.chi
ad.rda.trt_prop.before = ad.rda.before2$pCCA$tot.chi*100/ad.rda.before2$tot.chi
# BMC
# conditioning on a batch effect
ad.rda.bmc1 = rda(ad.bmc ~ group + Condition(batch), data = ad.data.design)
ad.rda.bmc2 = rda(ad.bmc ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.bmc = ad.rda.bmc1$pCCA$tot.chi*100/ad.rda.bmc1$tot.chi
ad.rda.trt_prop.bmc = ad.rda.bmc2$pCCA$tot.chi*100/ad.rda.bmc2$tot.chi
# combat
# conditioning on a batch effect
ad.rda.combat1 = rda(ad.combat ~ group + Condition(batch), data = ad.data.design)
ad.rda.combat2 = rda(ad.combat ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.combat = ad.rda.combat1$pCCA$tot.chi*100/ad.rda.combat1$tot.chi
ad.rda.trt_prop.combat = ad.rda.combat2$pCCA$tot.chi*100/ad.rda.combat2$tot.chi
# limma
# conditioning on a batch effect
ad.rda.limma1 = rda(ad.limma ~ group + Condition(batch), data = ad.data.design)
ad.rda.limma2 = rda(ad.limma ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.limma = ad.rda.limma1$pCCA$tot.chi*100/ad.rda.limma1$tot.chi
ad.rda.trt_prop.limma = ad.rda.limma2$pCCA$tot.chi*100/ad.rda.limma2$tot.chi
# percentile
# conditioning on a batch effect
ad.rda.percentile1 = rda(ad.percentile ~ group + Condition(batch), data = ad.data.design)
ad.rda.percentile2 = rda(ad.percentile ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.percentile = ad.rda.percentile1$pCCA$tot.chi*100/ad.rda.percentile1$tot.chi
ad.rda.trt_prop.percentile = ad.rda.percentile2$pCCA$tot.chi*100/ad.rda.percentile2$tot.chi
# SVD
# conditioning on a batch effect
ad.rda.svd1 = rda(ad.svd ~ group + Condition(batch), data = ad.data.design)
ad.rda.svd2 = rda(ad.svd ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.svd = ad.rda.svd1$pCCA$tot.chi*100/ad.rda.svd1$tot.chi
ad.rda.trt_prop.svd = ad.rda.svd2$pCCA$tot.chi*100/ad.rda.svd2$tot.chi
# RUVIII
# conditioning on a batch effect
ad.rda.ruv1 = rda(ad.ruvIII ~ group + Condition(batch), data = ad.data.design)
ad.rda.ruv2 = rda(ad.ruvIII ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.ruv = ad.rda.ruv1$pCCA$tot.chi*100/ad.rda.ruv1$tot.chi
ad.rda.trt_prop.ruv = ad.rda.ruv2$pCCA$tot.chi*100/ad.rda.ruv2$tot.chi
# proportion
ad.rda.prop.before = c(ad.rda.bat_prop.before,ad.rda.trt_prop.before)
ad.rda.prop.bmc = c(ad.rda.bat_prop.bmc,ad.rda.trt_prop.bmc)
ad.rda.prop.combat = c(ad.rda.bat_prop.combat,ad.rda.trt_prop.combat)
ad.rda.prop.limma = c(ad.rda.bat_prop.limma,ad.rda.trt_prop.limma)
ad.rda.prop.percentile = c(ad.rda.bat_prop.percentile,ad.rda.trt_prop.percentile)
ad.rda.prop.svd= c(ad.rda.bat_prop.svd,ad.rda.trt_prop.svd)
ad.rda.prop.ruv= c(ad.rda.bat_prop.ruv,ad.rda.trt_prop.ruv)
#############
ad.rda.prop.val = c(ad.rda.prop.before,ad.rda.prop.bmc,ad.rda.prop.combat,ad.rda.prop.limma,ad.rda.prop.percentile,ad.rda.prop.svd,ad.rda.prop.ruv)
ad.rda.prop = data.frame(prop = ad.rda.prop.val, prop.r = round(ad.rda.prop.val,2), Method = rep(c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII'),each=2),Type = rep(c('Batch','Treatment'),7))
ad.rda.prop$Method =  factor(ad.rda.prop$Method, levels = unique(ad.rda.prop$Method))
ggplot(data = ad.rda.prop, aes(x=Method,y=prop,fill = Type)) + geom_bar(stat="identity",position = 'dodge', colour = 'black') + geom_text(data=ad.rda.prop, aes(Method, prop+2.5, label=prop.r), position = position_dodge(width=1), size=3) + theme_bw() + labs(y = "Variance explained (%)") + theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_fill_hue(l=40) + ylim(0,100)
# AD data
ad.PVCA.score = data.frame(Interaction = NA, Batch = NA,Treatment = NA,Residuals = NA)
ad.Bat_Int.factors = data.frame(Batch = ad.batch, Treatment = ad.trt)
rownames(ad.Bat_Int.factors) = rownames(ad.tss.clr)
pdata <- AnnotatedDataFrame(ad.Bat_Int.factors)
# before
ad.eset.X.before <- new("ExpressionSet", exprs = t(ad.tss.clr), phenoData = pdata)
ad.pvcaObj.before <- pvcaBatchAssess(ad.eset.X.before, c('Batch','Treatment'), 0.6)
ad.values.before = ad.pvcaObj.before$dat
ad.PVCA.score[1,] = ad.values.before
# bmc
ad.eset.X.bmc <- new("ExpressionSet", exprs = t(ad.bmc), phenoData = pdata)
ad.pvcaObj.bmc <- pvcaBatchAssess(ad.eset.X.bmc, c('Batch','Treatment'), 0.6)
ad.values.bmc = ad.pvcaObj.bmc$dat
ad.PVCA.score[2,] = ad.values.bmc
# combat
ad.eset.X.combat <- new("ExpressionSet", exprs = t(ad.combat), phenoData = pdata)
ad.pvcaObj.combat <- pvcaBatchAssess(ad.eset.X.combat, c('Batch','Treatment'), 0.6)
ad.values.combat = ad.pvcaObj.combat$dat
ad.PVCA.score[3,] = ad.values.combat
# PN
ad.eset.X.percentile <- new("ExpressionSet", exprs = t(ad.percentile), phenoData = pdata)
ad.pvcaObj.percentile <- pvcaBatchAssess(ad.eset.X.percentile, c('Batch','Treatment'), 0.6)
ad.values.percentile = ad.pvcaObj.percentile$dat
ad.PVCA.score[5,] = ad.values.percentile
# limma
ad.eset.X.limma <- new("ExpressionSet", exprs = t(ad.limma), phenoData = pdata)
ad.pvcaObj.limma <- pvcaBatchAssess(ad.eset.X.limma, c('Batch','Treatment'), 0.6)
ad.values.limma = ad.pvcaObj.limma$dat
ad.PVCA.score[4,] = ad.values.limma
# svd
ad.eset.X.svd <- new("ExpressionSet", exprs = t(ad.svd), phenoData = pdata)
ad.pvcaObj.svd <- pvcaBatchAssess(ad.eset.X.svd, c('Batch','Treatment'), 0.6)
ad.values.svd = ad.pvcaObj.svd$dat
ad.PVCA.score[6,] = ad.values.svd
# RUVIII
ad.eset.X.ruv <- new("ExpressionSet", exprs = t(ad.ruvIII), phenoData = pdata)
ad.pvcaObj.ruv <- pvcaBatchAssess(ad.eset.X.ruv, c('Batch','Treatment'), 0.6)
ad.values.ruv = ad.pvcaObj.ruv$dat
ad.PVCA.score[7,] = ad.values.ruv
rownames(ad.PVCA.score) =c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII')
#############
ad.pvca.prop.val = c(ad.PVCA.score$Batch,ad.PVCA.score$Treatment)
ad.pvca.prop = data.frame(prop = ad.pvca.prop.val, prop.r = round(ad.pvca.prop.val,2), Method = rep(c('Before','BMC','ComBat','rBE','PN','SVD','RUVIII'),2),Type = rep(c('Batch','Treatment'),each = 7))
ad.pvca.prop$Method =  factor(ad.pvca.prop$Method, levels = unique(ad.pvca.prop$Method))
ggplot(data = ad.pvca.prop, aes(x=Method,y=prop,fill = Type)) + geom_bar(stat="identity",position = 'dodge',colour = 'black') + geom_text(data=ad.pvca.prop, aes(Method, prop+0.03, label=prop.r), position = position_dodge(width=0.9), size=3) + theme_bw() + labs(y = "Weighted average proportion variance") + theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_fill_hue(l=40) + ylim(0,1)
sponge.data.plot
sponge.silh.plot
###################
# Sponge data
sponge.silh.before = calc.sil(sponge.pca.before$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.bmc = calc.sil(sponge.pca.bmc$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.combat = calc.sil(sponge.pca.combat$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.limma = calc.sil(sponge.pca.limma$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.percentile = calc.sil(sponge.pca.percentile$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.svd = calc.sil(sponge.pca.svd$variates$X,y1 = sponge.batch, y2= sponge.trt, name.y1 = 'Batch',name.y2 = 'Tissue')
sponge.silh.plot = rbind(sponge.silh.before, sponge.silh.bmc, sponge.silh.combat, sponge.silh.limma, sponge.silh.percentile, sponge.silh.svd)
sponge.silh.plot$method = c(rep('Before', nrow(sponge.silh.before)),
rep('BMC', nrow(sponge.silh.bmc)),
rep('ComBat', nrow(sponge.silh.combat)),
rep('rBE', nrow(sponge.silh.limma)),
rep('PN', nrow(sponge.silh.percentile)),
rep('SVD', nrow(sponge.silh.svd))
)
sponge.silh.plot$method = factor(sponge.silh.plot$method,levels = unique(sponge.silh.plot$method))
sponge.silh.plot$Cluster =  factor(sponge.silh.plot$Cluster, levels = unique(sponge.silh.plot$Cluster))
sponge.silh.plot$Type =  factor(sponge.silh.plot$Type, levels = unique(sponge.silh.plot$Type))
ggplot(sponge.silh.plot, aes(x=Type, y=silh.coeff, color = Cluster, shape = Type)) + geom_point() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(), axis.text = element_text(size=12),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_color_manual(values = c("#388ECC","#F68B33","#F0E442","#D55E00")) + labs(x = "Type", y = "Silhouette Coefficient", name="Type")
############
# AD data
ad.silh.before = calc.sil(ad.pca.before$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.bmc = calc.sil(ad.pca.bmc$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.combat = calc.sil(ad.pca.combat$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.limma = calc.sil(ad.pca.limma$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.percentile = calc.sil(ad.pca.percentile$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.svd = calc.sil(ad.pca.svd$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.ruv = calc.sil(ad.pca.ruv$variates$X,y1 = ad.batch, y2= ad.trt, name.y1 = 'Batch',name.y2 = 'Treatment')
ad.silh.plot = rbind(ad.silh.before, ad.silh.bmc, ad.silh.combat, ad.silh.limma, ad.silh.percentile, ad.silh.svd,ad.silh.ruv)
ad.silh.plot$method = c(rep('Before', nrow(ad.silh.before)),
rep('BMC', nrow(ad.silh.bmc)),
rep('ComBat', nrow(ad.silh.combat)),
rep('rBE', nrow(ad.silh.limma)),
rep('PN', nrow(ad.silh.percentile)),
rep('SVD', nrow(ad.silh.svd)),
rep('RUVIII', nrow(ad.silh.ruv))
)
ad.silh.plot$method = factor(ad.silh.plot$method, levels = unique(ad.silh.plot$method))
ad.silh.plot$Cluster =  factor(ad.silh.plot$Cluster, levels = unique(ad.silh.plot$Cluster))
ad.silh.plot$Type =  factor(ad.silh.plot$Type, levels = unique(ad.silh.plot$Type))
ggplot(ad.silh.plot, aes(x=Type, y=silh.coeff, color = Cluster, shape = Type)) + geom_point() + facet_grid(cols = vars(method)) + theme_bw() + theme(axis.text.x = element_text(angle = 60, hjust = 1), strip.text = element_text(size=12),panel.grid = element_blank(),axis.text = element_text(size=10),axis.title = element_text(size=15),legend.title = element_text(size=15),legend.text = element_text(size=12)) + scale_color_manual(values=c("#388ECC", "#F68B33", "#C2C2C2", "#009E73", "#CC79A7","#0072B2", "#999999")) + labs(x = "Type", y = "Silhouette Coefficient", name="Type")
# ad data
ad.index.keep = which(colSums(ad.count)*100/(sum(colSums(ad.count))) > 0.01)
ad.count.keep = ad.count[, ad.index.keep]
dim(ad.count.keep)
# hd data
#hd.index.keep = which(colSums(hd.count)*100/(sum(colSums(hd.count))) > 0.001)
hd.count.keep = hd.count
dim(hd.count.keep)
# cran.packages = c('knitr', 'mixOmics', 'xtable', 'ggplot2', 'vegan', 'cluster',
#                   'gridExtra', 'pheatmap', 'ruv', 'lmerTest', 'bapred')
# install.packages(cran.packages)
# bioconductor.packages = c('sva', 'limma', 'AgiMicroRna',
#                           'variancePartition', 'pvca')
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(bioconductor.packages, version = "3.8")
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
library(ggplot2) # PCA sample plot with density
library(gridExtra) # PCA sample plot with density
library(limma) # removeBatchEffect (LIMMA)
library(vegan) # RDA
library(AgiMicroRna) # RLE plot
library(cluster) # silhouette coefficient
library(variancePartition) # variance calculation
library(pvca) # PVCA
library(pheatmap) # heatmap
library(ruv) # RUVIII
library(lmerTest) # lmer
library(bapred) # FAbatch
# load the data
load(file = './datasets/microbiome_datasets.RData')
# load the extra functions
source(file = './Functions.R')
dim(sponge.tss)
dim(ad.count)
dim(hd.count)
# ad data
ad.index.keep = which(colSums(ad.count)*100/(sum(colSums(ad.count))) > 0.01)
ad.count.keep = ad.count[, ad.index.keep]
dim(ad.count.keep)
# hd data
#hd.index.keep = which(colSums(hd.count)*100/(sum(colSums(hd.count))) > 0.001)
hd.count.keep = hd.count
dim(hd.count.keep)
# sponge data
sponge.tss = t(apply(sponge.tss + 0.01, 1, TSS.divide))
# ad data
ad.tss = t(apply(ad.count.keep + 1, 1, TSS.divide))
# hd data
hd.tss = t(apply(hd.count.keep + 1, 1, TSS.divide))
# sponge data
sponge.lib.size.tss <- apply(sponge.tss, 1, sum)
barplot(sponge.lib.size.tss, main =  'Sponge data', las = 2)
# ad data
ad.lib.size.tss <- apply(ad.tss, 1, sum)
barplot(ad.lib.size.tss, main =  'AD data', las = 2)
# hd data
hd.lib.size.tss <- apply(hd.tss, 1, sum)
barplot(hd.lib.size.tss, main =  'HD data', las = 2)
# sponge data
sponge.tss.clr <- logratio.transfo(sponge.tss, logratio = 'CLR')
class(sponge.tss.clr) <- 'matrix'
# ad data
ad.tss.clr <- logratio.transfo(ad.tss, logratio = 'CLR')
class(ad.tss.clr) <- 'matrix'
# hd data
hd.tss.clr <- logratio.transfo(hd.tss, logratio = 'CLR')
class(hd.tss.clr) <- 'matrix'
knitr::include_graphics("figures/table.png")
Scatter_Density(data = sponge.pca.before$variates$X, batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.before$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Before batch effect correction (Sponge)')
# sponge data
sponge.pca.before = pca(sponge.tss.clr, ncomp = 3)
# ad data
ad.pca.before = pca(ad.tss.clr, ncomp = 3)
# hd data
hd.pca.before = pca(hd.tss.clr, ncomp = 3)
Scatter_Density(data = sponge.pca.before$variates$X, batch = sponge.batch, trt = sponge.trt, expl.var = sponge.pca.before$explained_variance, xlim = c(-4.5,5), ylim = c(-3,4), batch.legend.title = 'Gel (batch)', trt.legend.title = 'Tissue (trt)', title = 'Before batch effect correction (Sponge)')
Scatter_Density(data = ad.pca.before$variates$X, batch = ad.batch,
trt = ad.trt, expl.var = ad.pca.before$explained_variance,
xlim = c(-15,14), ylim = c(-13,14),
batch.legend.title = 'Date (batch)',
trt.legend.title = 'Conc (trt)',
title = 'Before batch effect correction (AD)')
Scatter_Density(data = hd.pca.before$variates$X, batch = hd.batch,
trt = hd.trt, expl.var = hd.pca.before$explained_variance,
xlim = c(-20,20), ylim = c(-25,15),
batch.legend.title = 'Cage (batch)',
trt.legend.title = 'Genotype (trt)',
title = 'Before batch effect correction (HD)')
# sponge data
sponge.batch_c = sponge.batch[sponge.trt == 'C']
sponge.batch_e = sponge.batch[sponge.trt == 'E']
# before
sponge.before_c = sponge.tss.clr[sponge.trt == 'C',]
sponge.before_e = sponge.tss.clr[sponge.trt == 'E',]
RleMicroRna2(object = t(sponge.before_c),batch = sponge.batch_c,maintitle = 'Sponge (tissue: choanosome)')
RleMicroRna2(object = t(sponge.before_e),batch = sponge.batch_e,maintitle = 'Sponge (tissue: ectosome)')
