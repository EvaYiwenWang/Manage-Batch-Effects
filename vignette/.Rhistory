# percentile normalisation
ad.varmat.percentile <- as.matrix(ad.varPart.percentile[ ,1:2])
# SVD
ad.varmat.svd <- as.matrix(ad.varPart.svd[ ,1:2])
# RUVIII
ad.varmat.ruv <- as.matrix(ad.varPart.ruv[ ,1:2])
## merge results
ad.variance <- c(as.vector(ad.varmat.before), as.vector(ad.varmat.bmc),
as.vector(ad.varmat.combat), as.vector(ad.varmat.limma),
as.vector(ad.varmat.percentile), as.vector(ad.varmat.svd),
as.vector(ad.varmat.ruv))
## add batch, trt and methods info
ad.variance <- cbind(variance = ad.variance,
Type = rep(c( 'Treatment', 'Batch'), each = ncol(ad.tss.clr)),
method = rep(c('Before', 'BMC', 'ComBat', 'rBE', 'PN',
'SVD', 'RUVIII'), each = 2*ncol(ad.tss.clr)))
## reorder levels
ad.variance <- as.data.frame(ad.variance)
ad.variance$method <- factor(ad.variance$method,
levels = unique(ad.variance$method))
ad.variance$variance <- as.numeric(as.character(ad.variance$variance))
ggplot(ad.variance, aes(x = Type, y = variance, fill = Type)) +
geom_boxplot() + facet_grid(cols = vars(method)) + theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
strip.text = element_text(size = 11), panel.grid = element_blank(),
axis.text = element_text(size = 12), axis.title = element_text(size = 15),
legend.title = element_text(size = 15), legend.text = element_text(size = 12)) +
labs(x = "Type", y = "Proportion Variance", name = 'Type') +
scale_fill_hue(l = 40) + ylim(0,1)
# Sponge data
sponge.data.design <- numeric()
sponge.data.design$group <- sponge.trt
sponge.data.design$batch <- sponge.batch
# before
# conditioning on a batch effect
sponge.rda.before1 <- rda(sponge.tss.clr ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.before2 <- rda(sponge.tss.clr ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.before <- sponge.rda.before1$pCCA$tot.chi*100/sponge.rda.before1$tot.chi
sponge.rda.trt_prop.before <- sponge.rda.before2$pCCA$tot.chi*100/sponge.rda.before2$tot.chi
# BMC
# conditioning on a batch effect
sponge.rda.bmc1 <- rda(sponge.bmc ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.bmc2 <- rda(sponge.bmc ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.bmc <- sponge.rda.bmc1$pCCA$tot.chi*100/sponge.rda.bmc1$tot.chi
sponge.rda.trt_prop.bmc <- sponge.rda.bmc2$pCCA$tot.chi*100/sponge.rda.bmc2$tot.chi
# combat
# conditioning on a batch effect
sponge.rda.combat1 <- rda(sponge.combat ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.combat2 <- rda(sponge.combat ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.combat <- sponge.rda.combat1$pCCA$tot.chi*100/sponge.rda.combat1$tot.chi
sponge.rda.trt_prop.combat <- sponge.rda.combat2$pCCA$tot.chi*100/sponge.rda.combat2$tot.chi
# limma
# conditioning on a batch effect
sponge.rda.limma1 <- rda(sponge.limma ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.limma2 <- rda(sponge.limma ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.limma <- sponge.rda.limma1$pCCA$tot.chi*100/sponge.rda.limma1$tot.chi
sponge.rda.trt_prop.limma <- sponge.rda.limma2$pCCA$tot.chi*100/sponge.rda.limma2$tot.chi
# percentile
# conditioning on a batch effect
sponge.rda.percentile1 <- rda(sponge.percentile ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.percentile2 <- rda(sponge.percentile ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.percentile <- sponge.rda.percentile1$pCCA$tot.chi*100/sponge.rda.percentile1$tot.chi
sponge.rda.trt_prop.percentile <- sponge.rda.percentile2$pCCA$tot.chi*100/sponge.rda.percentile2$tot.chi
# SVD
# conditioning on a batch effect
sponge.rda.svd1 <- rda(sponge.svd ~ group + Condition(batch),
data = sponge.data.design)
sponge.rda.svd2 <- rda(sponge.svd ~ batch + Condition(group),
data = sponge.data.design)
# amount of variance
sponge.rda.bat_prop.svd <- sponge.rda.svd1$pCCA$tot.chi*100/sponge.rda.svd1$tot.chi
sponge.rda.trt_prop.svd <- sponge.rda.svd2$pCCA$tot.chi*100/sponge.rda.svd2$tot.chi
# proportion
sponge.rda.prop.before <- c(sponge.rda.bat_prop.before,
sponge.rda.trt_prop.before)
sponge.rda.prop.bmc <- c(sponge.rda.bat_prop.bmc,
sponge.rda.trt_prop.bmc)
sponge.rda.prop.combat <- c(sponge.rda.bat_prop.combat,
sponge.rda.trt_prop.combat)
sponge.rda.prop.limma <- c(sponge.rda.bat_prop.limma,
sponge.rda.trt_prop.limma)
sponge.rda.prop.percentile <- c(sponge.rda.bat_prop.percentile,
sponge.rda.trt_prop.percentile)
sponge.rda.prop.svd <- c(sponge.rda.bat_prop.svd,
sponge.rda.trt_prop.svd)
# merge results
sponge.rda.prop.val <- c(sponge.rda.prop.before, sponge.rda.prop.bmc,
sponge.rda.prop.combat, sponge.rda.prop.limma,
sponge.rda.prop.percentile, sponge.rda.prop.svd)
# add batch, trt and method info
sponge.rda.prop <- data.frame(prop = sponge.rda.prop.val,
prop.r = round(sponge.rda.prop.val, 2),
Method = rep(c('Before', 'BMC', 'ComBat',
'rBE', 'PN', 'SVD'), each = 2),
Type = rep(c('Batch', 'Tissue'), 6))
# reorder levels
sponge.rda.prop$Method <- factor(sponge.rda.prop$Method,
levels = unique(sponge.rda.prop$Method))
ggplot(data = sponge.rda.prop, aes(x = Method, y = prop, fill = Type)) +
geom_bar(stat = "identity", position = 'dodge', colour = 'black') +
geom_text(data = sponge.rda.prop, aes(Method, prop + 2.5, label = prop.r),
position = position_dodge(width = 0.9), size = 3) + theme_bw() +
labs(y = "Variance explained (%)") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
panel.grid = element_blank(), axis.text = element_text(size = 12),
axis.title = element_text(size = 15), legend.title = element_text(size = 15),
legend.text = element_text(size = 12)) + ylim(0,100)
# AD data
ad.data.design <- numeric()
ad.data.design$group <- ad.trt
ad.data.design$batch <- ad.batch
# before
# conditioning on a batch effect
ad.rda.before1 <- rda(ad.tss.clr ~ group + Condition(batch), data = ad.data.design)
ad.rda.before2 <- rda(ad.tss.clr ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.before <- ad.rda.before1$pCCA$tot.chi*100/ad.rda.before1$tot.chi
ad.rda.trt_prop.before <- ad.rda.before2$pCCA$tot.chi*100/ad.rda.before2$tot.chi
# BMC
# conditioning on a batch effect
ad.rda.bmc1 <- rda(ad.bmc ~ group + Condition(batch), data = ad.data.design)
ad.rda.bmc2 <- rda(ad.bmc ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.bmc <- ad.rda.bmc1$pCCA$tot.chi*100/ad.rda.bmc1$tot.chi
ad.rda.trt_prop.bmc <- ad.rda.bmc2$pCCA$tot.chi*100/ad.rda.bmc2$tot.chi
# combat
# conditioning on a batch effect
ad.rda.combat1 <- rda(ad.combat ~ group + Condition(batch), data = ad.data.design)
ad.rda.combat2 <- rda(ad.combat ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.combat <- ad.rda.combat1$pCCA$tot.chi*100/ad.rda.combat1$tot.chi
ad.rda.trt_prop.combat <- ad.rda.combat2$pCCA$tot.chi*100/ad.rda.combat2$tot.chi
# limma
# conditioning on a batch effect
ad.rda.limma1 <- rda(ad.limma ~ group + Condition(batch), data = ad.data.design)
ad.rda.limma2 <- rda(ad.limma ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.limma <- ad.rda.limma1$pCCA$tot.chi*100/ad.rda.limma1$tot.chi
ad.rda.trt_prop.limma <- ad.rda.limma2$pCCA$tot.chi*100/ad.rda.limma2$tot.chi
# percentile
# conditioning on a batch effect
ad.rda.percentile1 <- rda(ad.percentile ~ group + Condition(batch),
data = ad.data.design)
ad.rda.percentile2 <- rda(ad.percentile ~ batch + Condition(group),
data = ad.data.design)
# amount of variance
ad.rda.bat_prop.percentile <- ad.rda.percentile1$pCCA$tot.chi*100/ad.rda.percentile1$tot.chi
ad.rda.trt_prop.percentile <- ad.rda.percentile2$pCCA$tot.chi*100/ad.rda.percentile2$tot.chi
# SVD
# conditioning on a batch effect
ad.rda.svd1 <- rda(ad.svd ~ group + Condition(batch), data = ad.data.design)
ad.rda.svd2 <- rda(ad.svd ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.svd <- ad.rda.svd1$pCCA$tot.chi*100/ad.rda.svd1$tot.chi
ad.rda.trt_prop.svd <- ad.rda.svd2$pCCA$tot.chi*100/ad.rda.svd2$tot.chi
# RUVIII
# conditioning on a batch effect
ad.rda.ruv1 <- rda(ad.ruvIII ~ group + Condition(batch), data = ad.data.design)
ad.rda.ruv2 <- rda(ad.ruvIII ~ batch + Condition(group), data = ad.data.design)
# amount of variance
ad.rda.bat_prop.ruv <- ad.rda.ruv1$pCCA$tot.chi*100/ad.rda.ruv1$tot.chi
ad.rda.trt_prop.ruv <- ad.rda.ruv2$pCCA$tot.chi*100/ad.rda.ruv2$tot.chi
# proportion
ad.rda.prop.before <- c(ad.rda.bat_prop.before, ad.rda.trt_prop.before)
ad.rda.prop.bmc <- c(ad.rda.bat_prop.bmc, ad.rda.trt_prop.bmc)
ad.rda.prop.combat <- c(ad.rda.bat_prop.combat, ad.rda.trt_prop.combat)
ad.rda.prop.limma <- c(ad.rda.bat_prop.limma, ad.rda.trt_prop.limma)
ad.rda.prop.percentile <- c(ad.rda.bat_prop.percentile, ad.rda.trt_prop.percentile)
ad.rda.prop.svd <- c(ad.rda.bat_prop.svd, ad.rda.trt_prop.svd)
ad.rda.prop.ruv <- c(ad.rda.bat_prop.ruv, ad.rda.trt_prop.ruv)
## merge results
ad.rda.prop.val <- c(ad.rda.prop.before, ad.rda.prop.bmc,
ad.rda.prop.combat, ad.rda.prop.limma,
ad.rda.prop.percentile, ad.rda.prop.svd,
ad.rda.prop.ruv)
## add batch, trt and method info
ad.rda.prop <- data.frame(prop = ad.rda.prop.val, prop.r = round(ad.rda.prop.val, 2),
Method = rep(c('Before', 'BMC', 'ComBat', 'rBE',
'PN', 'SVD', 'RUVIII'), each = 2),
Type = rep(c('Batch', 'Treatment'), 7))
# reorder levels
ad.rda.prop$Method <- factor(ad.rda.prop$Method, levels = unique(ad.rda.prop$Method))
ggplot(data = ad.rda.prop, aes(x = Method, y = prop, fill = Type)) +
geom_bar(stat = "identity", position = 'dodge', colour = 'black') +
geom_text(data = ad.rda.prop, aes(Method, prop + 2.5, label = prop.r),
position = position_dodge(width = 1), size = 3) + theme_bw() +
labs(y = "Variance explained (%)") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
panel.grid = element_blank(), axis.text = element_text(size = 12),
axis.title = element_text(size = 15), legend.title = element_text(size = 15),
legend.text = element_text(size = 12)) + scale_fill_hue(l = 40) + ylim(0,100)
# AD data
ad.PVCA.score <- data.frame(Interaction = NA, Batch = NA,
Treatment = NA, Residuals = NA)
ad.Bat_Int.factors <- data.frame(Batch = ad.batch, Treatment = ad.trt)
rownames(ad.Bat_Int.factors) <- rownames(ad.tss.clr)
pdata <- AnnotatedDataFrame(ad.Bat_Int.factors)
# before
ad.eset.X.before <- new("ExpressionSet", exprs = t(ad.tss.clr), phenoData = pdata)
ad.pvcaObj.before <- pvcaBatchAssess(ad.eset.X.before, c('Batch', 'Treatment'), 0.6)
ad.values.before <- ad.pvcaObj.before$dat
ad.PVCA.score[1, ] <- ad.values.before
# bmc
ad.eset.X.bmc <- new("ExpressionSet", exprs = t(ad.bmc), phenoData = pdata)
ad.pvcaObj.bmc <- pvcaBatchAssess(ad.eset.X.bmc, c('Batch', 'Treatment'), 0.6)
ad.values.bmc <- ad.pvcaObj.bmc$dat
ad.PVCA.score[2, ] <- ad.values.bmc
# combat
ad.eset.X.combat <- new("ExpressionSet", exprs = t(ad.combat), phenoData = pdata)
ad.pvcaObj.combat <- pvcaBatchAssess(ad.eset.X.combat, c('Batch', 'Treatment'), 0.6)
ad.values.combat <- ad.pvcaObj.combat$dat
ad.PVCA.score[3, ] <- ad.values.combat
# limma
ad.eset.X.limma <- new("ExpressionSet", exprs = t(ad.limma), phenoData = pdata)
ad.pvcaObj.limma <- pvcaBatchAssess(ad.eset.X.limma, c('Batch', 'Treatment'), 0.6)
ad.values.limma <- ad.pvcaObj.limma$dat
ad.PVCA.score[4, ] <- ad.values.limma
# PN
ad.eset.X.percentile <- new("ExpressionSet", exprs = t(ad.percentile),
phenoData = pdata)
ad.pvcaObj.percentile <- pvcaBatchAssess(ad.eset.X.percentile,
c('Batch', 'Treatment'), 0.6)
ad.values.percentile <- ad.pvcaObj.percentile$dat
ad.PVCA.score[5, ] <- ad.values.percentile
# svd
ad.eset.X.svd <- new("ExpressionSet", exprs = t(ad.svd), phenoData = pdata)
ad.pvcaObj.svd <- pvcaBatchAssess(ad.eset.X.svd, c('Batch', 'Treatment'), 0.6)
ad.values.svd <- ad.pvcaObj.svd$dat
ad.PVCA.score[6, ] <- ad.values.svd
# RUVIII
ad.eset.X.ruv <- new("ExpressionSet", exprs = t(ad.ruvIII), phenoData = pdata)
ad.pvcaObj.ruv <- pvcaBatchAssess(ad.eset.X.ruv, c('Batch', 'Treatment'), 0.6)
ad.values.ruv <- ad.pvcaObj.ruv$dat
ad.PVCA.score[7, ] <- ad.values.ruv
rownames(ad.PVCA.score) <- c('Before', 'BMC', 'ComBat', 'rBE', 'PN', 'SVD', 'RUVIII')
# merge results
ad.pvca.prop.val <- c(ad.PVCA.score$Batch, ad.PVCA.score$Treatment)
# add batch, trt and method info
ad.pvca.prop <- data.frame(prop = ad.pvca.prop.val, prop.r = round(ad.pvca.prop.val, 2),
Method = rep(c('Before', 'BMC', 'ComBat', 'rBE',
'PN', 'SVD', 'RUVIII'), 2),
Type = rep(c('Batch', 'Treatment'), each = 7))
# reorder levels
ad.pvca.prop$Method <- factor(ad.pvca.prop$Method, levels = unique(ad.pvca.prop$Method))
ggplot(data = ad.pvca.prop, aes(x = Method, y = prop, fill = Type)) +
geom_bar(stat = "identity", position = 'dodge', colour = 'black') +
geom_text(data = ad.pvca.prop, aes(Method, prop + 0.03, label = prop.r),
position = position_dodge(width = 0.9), size = 3) + theme_bw() +
labs(y = "Weighted average proportion variance") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
panel.grid = element_blank(),axis.text = element_text(size = 12),
axis.title = element_text(size = 15), legend.title = element_text(size = 15),
legend.text = element_text(size = 12)) + scale_fill_hue(l = 40) + ylim(0,1)
ggplot(data = sponge.tss.clr, aes(x=data[,1], y=data[,2], colour = sponge.batch,shape = 16))
ggplot(data = sponge.tss.clr, aes(x=sponge.tss.clr[,1], y=sponge.tss.clr[,2], colour = sponge.batch,shape = 16))
sponge.batch
ggplot(data = sponge.tss.clr, aes(x=sponge.tss.clr[,1], y=sponge.tss.clr[,2], colour = sponge.batch,shape = NULL))
ggplot(data = sponge.tss.clr, aes(x=sponge.tss.clr[,1], y=sponge.tss.clr[,2], colour = sponge.batch,shape = NULL)) + geom_point(shape = 16)
ggplot(data = sponge.tss.clr, aes(x=sponge.tss.clr[,1], y=sponge.tss.clr[,2], colour = sponge.batch,shape = 16)) + geom_point(shape = 16)
ggplot(data = sponge.tss.clr, aes(x=sponge.tss.clr[,1], y=sponge.tss.clr[,2], colour = sponge.batch)) + geom_point(shape = 16)
ggplot(data = sponge.pca.before, aes(x=sponge.pca.before[,1], y=sponge.pca.before[,2], colour = sponge.batch)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before), aes(x=sponge.pca.before[,1], y=sponge.pca.before[,2], colour = sponge.batch)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = NULL)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = 16)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = sponge.trt)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = sponge.trt)) + geom_point(shape = sponge.trt)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = sponge.trt)) + geom_point()
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = s16)) + geom_point()
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = 16)) + geom_point()
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = 16)) + geom_point(shape = 16)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = sponge.batch)) + geom_point(shape = sponge.batch)
ggplot(data = as.data.frame(sponge.pca.before$X), aes(x=sponge.pca.before$X[,1], y=sponge.pca.before$X[,2], colour = sponge.batch, shape = sponge.trt)) + geom_point(shape = sponge.trt)
levels(sponge.trt)
nlevels(sponge.trt)
nlevels(sponge.trt) >= 2
as.factor(NULL)
nlevels(as.factor(NULL))
# title: Functions
# Author: Yiwen Wang
# Date: Jun. 16th
# ---------------------------------------
#  TSS (Total Sum Scaling) Normalisation
# ---------------------------------------
TSS.divide = function(x){
(x)/sum(x)
}
#---------------------------------------------------------------------
# Principal component analysis (PCA) with density plots per component
#---------------------------------------------------------------------
Scatter_Density <- function(data = data,batch = batch, trt = NULL,expl.var = expl.var,
xlim=xlim,ylim=ylim, batch.legend.title = 'Batch',
trt.legend.title = 'Treatment', density.lwd = 0.2,
title = NULL, title.cex = 1.5, legend.cex = 0.7, legend.title.cex =0.75){
data = as.data.frame(data)
batch = as.factor(batch)
trt = as.factor(trt)
if(nlevels(trt) >= 2){
pMain <- ggplot(data = data, aes(x=data[,1], y=data[,2], colour = batch,shape = trt)) +
geom_point() + xlab(paste0('PC1: ',round(as.numeric(expl.var[1])*100),'% expl.var')) +
ylab(paste0('PC2: ',round(as.numeric(expl.var[2])*100),'% expl.var')) +
scale_color_manual(values=color.mixo(1:10)) + theme_bw() + xlim(xlim[1],xlim[2]) +
ylim(ylim[1],ylim[2]) + labs(colour=batch.legend.title,shape = trt.legend.title)
pTop <- ggplot(data,aes(x=data[,1], fill=batch,linetype = trt)) +
geom_density(size = density.lwd,alpha=0.5) + ylab('Density') +
theme(axis.title.x  = element_blank(), axis.title.y = element_text(size = rel(0.8)),
plot.title = element_text(hjust = 0.5,size = rel(title.cex)),
axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
panel.background = element_blank()) + scale_fill_manual(values=color.mixo(1:10)) +
xlim(xlim[1],xlim[2]) + labs(title = title)
pRight <- ggplot(data,aes(x=data[,2], fill=batch,linetype = trt)) +
geom_density(size=density.lwd,alpha=0.5) +  coord_flip() + ylab('Density') +
theme(axis.title.x = element_text(size = rel(0.8)),
axis.title.y  = element_blank(), axis.line = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(),
panel.background = element_blank()) + scale_fill_manual(values=color.mixo(1:10)) +
xlim(ylim[1],ylim[2])
}else{
pMain <- ggplot(data = data, aes(x=data[,1], y=data[,2], colour = batch)) +
geom_point(shape = 16) + xlab(paste0('PC1: ',round(as.numeric(expl.var[1])*100),'% expl.var')) +
ylab(paste0('PC2: ',round(as.numeric(expl.var[2])*100),'% expl.var')) +
scale_color_manual(values=color.mixo(1:10)) + theme_bw() + xlim(xlim[1],xlim[2]) +
ylim(ylim[1],ylim[2]) + labs(colour=batch.legend.title)
pTop <- ggplot(data,aes(x=data[,1], fill=batch)) +
geom_density(size = density.lwd,alpha=0.5) + ylab('Density') +
theme(axis.title.x  = element_blank(), axis.title.y = element_text(size = rel(0.8)),
plot.title = element_text(hjust = 0.5,size = rel(title.cex)),
axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),
panel.background = element_blank()) + scale_fill_manual(values=color.mixo(1:10)) +
xlim(xlim[1],xlim[2]) + labs(title = title)
pRight <- ggplot(data,aes(x=data[,2], fill=batch)) +
geom_density(size=density.lwd,alpha=0.5) +  coord_flip() + ylab('Density') +
theme(axis.title.x = element_text(size = rel(0.8)),
axis.title.y  = element_blank(), axis.line = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(),
panel.background = element_blank()) + scale_fill_manual(values=color.mixo(1:10)) +
xlim(ylim[1],ylim[2])
}
g <- ggplotGrob(pMain + theme(legend.position="right",legend.box='horizontal',
legend.direction = 'vertical',
legend.key.height = unit(0.2, 'cm'),
legend.key.width = unit(0.1, 'cm'),
legend.title = element_text(size = rel(legend.title.cex)),
legend.spacing.x = unit(0.1, 'cm'),
legend.spacing.y = unit(0.1, 'cm'),
legend.text = element_text(size = rel(legend.cex))))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
grid.arrange(pTop+ theme(legend.position="none"), legend, pMain +
theme(legend.position="none"), pRight+ theme(legend.position="none"),
ncol = 2, nrow = 2, widths = c(3, 1), heights = c(1, 3))
}
#----------
# Box plot
#----------
box_plot_fun = function(data = data,x = x,y=y,title=NULL, batch.legend.title = 'Batch',x.angle = 0,
x.hjust = 0.5){
ggplot(data = data, aes(x=x, y=y, fill = x)) + stat_boxplot(geom = "errorbar", width = 0.4) +
geom_boxplot() + scale_fill_manual(values = color.mixo(1:10)) + theme_bw() +
theme(axis.text.x = element_text(angle = x.angle, hjust = x.hjust), panel.grid = element_blank(),
axis.title.x = element_blank(), axis.text = element_text(size=10),
axis.title = element_text(size=12),
plot.title = element_text(hjust = 0.5,size = rel(1))) +
labs(fill= batch.legend.title,y='value',title = title)
}
#-------------
# RLE plot
#------------
RleMicroRna2 <- function (object, maintitle = NULL, batch = batch, xlab = NA,
legend = TRUE,cex.lab = 1.2, cex.xaxis = 1,
cex.yaxis = 1, abline.lwd=0.5,legend.cex = 0.8,
xaxis.dist.ratio = 0.1, outcex = 1, title.cex = 1.3)
{
colorfill = color.mixo(batch)
nARR = dim(object)[2]
nGEN = dim(object)[1]
y = apply(object, 1, median)
mva = matrix(nrow = nGEN, ncol = nARR)
for (i in 1:nARR) {
x = object[, i]
mva[, i] = (x - y)
}
med = apply(mva, 2, median)
MIN = min(mva, na.rm = TRUE)
MAX = max(mva, na.rm = TRUE)
par(las = 3)
plot(med, xlim = c(0, nARR + 1), ylim = c(MIN, MAX), axes = FALSE,
xlab = xlab, ylab = "Deviations",cex.lab = cex.lab)
colnames(mva) = colnames(object)
res = boxplot(data.frame(mva), outline = TRUE, add = TRUE, col = colorfill,
xaxt = 'n', outcex = outcex, cex.axis = cex.yaxis) #outcex for outlier
axis(1,cex.axis=cex.xaxis,at = 1:ncol(object), labels = NA)
points(med, type = "p", col = "blue",cex = outcex)
lines(med, type = "l", col = "blue", lty = "dotted")
title(main = maintitle, cex.main = title.cex)
abline(0, 0, col = "red",lwd = abline.lwd)
par(las = 0)
end_point = 0.5 + ncol(object)  # add degrees to the x axis
box.max = max(max(res$stats),max(res$out))
box.min = min(min(res$stats),min(res$out))
box.range = box.max - box.min
text(seq(1.2,end_point,by=1), par("usr")[3]-xaxis.dist.ratio*box.range,
srt = 60, adj= 1, xpd = TRUE,
labels = paste(colnames(object)), cex=cex.xaxis)
if(legend == TRUE){
legend('topright',legend = unique(batch), pch=15,col = unique(colorfill),cex=legend.cex)
}
}
#--------------------------
# Percentile normalisation
#--------------------------
percentileofscore = function(df,control.index){
df.percentile = df
df.percentile[1:nrow(df),1:ncol(df)] = NA
for(i in 1:ncol(df)){
control = sort(df[control.index,i])
for(j in 1:nrow(df)){
percentile.strick = sum(control < df[j,i])/length(control)
percentile.weak = (length(control) - sum(control > df[j,i]))/length(control)
percentile = (percentile.strick + percentile.weak)/2
df.percentile[j,i] = percentile
}
}
return(df.percentile)
}
################
percentile_norm = function(data = data, batch = batch, trt = trt){
batch = as.factor(batch)
trt = as.factor(trt)
trt.list = list()
data.pn.df = data.frame()
for(i in 1:nlevels(batch)){
trt.each.b = trt[batch == levels(batch)[i]]
trt.list[[i]] = trt.each.b
data.each.b.pn = percentileofscore(data[batch == levels(batch)[i],], which(trt.each.b == levels(trt.each.b)[1]))
data.pn.df = rbind(data.pn.df,data.each.b.pn)
}
names(trt.list) = levels(batch)
data.pn.df.reorder = data.pn.df[rownames(data),]
return(data.pn.df.reorder)
}
#--------------------------
# Silhouette coefficient
#--------------------------
# function that calculates the silhouette coefficient based on a known cluster (i.e. batch or treatment)
# calculates silhouette width average
calc.sil = function(
x, # the PC variates
y1, y2 = NULL, # factor of interest, e.g. known batch info or known treatment info
name.y1, name.y2 = NULL # character of the factor of interest
){
library(cluster)
# calculate the distance, here euclidean is appropriate for PCA, NOT for t-SNE
dist.res = daisy(x, metric = 'euclidean')
# for factor 1
sil.batch.res1 = silhouette(x = as.numeric(y1), dist = dist.res)
# if factor 2 is provided
if(!is.null(y2))  sil.batch.res2 = silhouette(x = as.numeric(y2), dist = dist.res)
# extract average width silhouette per level
res1 = c(summary(sil.batch.res1)["clus.avg.widths"]$clus.avg.widths)
names(res1) = levels(y1)
if(!is.null(y2)){
res2 = c(summary(sil.batch.res2)["clus.avg.widths"]$clus.avg.widths)
names(res2) = levels(y2)
}
# output data for plotting
if(!is.null(y2)){
silh.coeff = c(res1, res2)
Cluster = c(levels(y1), levels (y2))
Type = c(rep(name.y1, nlevels(y1)), rep(name.y2, nlevels(y2)))
data.plot = data.frame(silh.coeff, Cluster, Type)
}else{
silh.coeff = c(res1)
Cluster = c(levels(y1))
Type = rep(name.y1, nlevels(y1))
data.plot = data.frame(silh.coeff, Cluster, Type)
}
return(invisible(data.plot))
}
# sponge data
sponge.pca.before <- pca(sponge.tss.clr, ncomp = 3)
# ad data
ad.pca.before <- pca(ad.tss.clr, ncomp = 3)
# hd data
hd.pca.before <- pca(hd.tss.clr, ncomp = 3)
# sponge data
Scatter_Density(data = sponge.pca.before$variates$X, batch = sponge.batch,
trt = sponge.trt, expl.var = sponge.pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Gel (batch)',
trt.legend.title = 'Tissue (trt)',
title = 'Before batch effect correction (Sponge)')
Scatter_Density(data = sponge.pca.before$variates$X, batch = sponge.batch,
expl.var = sponge.pca.before$explained_variance,
xlim = c(-4.5,5), ylim = c(-3,4),
batch.legend.title = 'Gel (batch)',
trt.legend.title = 'Tissue (trt)',
title = 'Before batch effect correction (Sponge)')
